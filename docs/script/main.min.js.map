{"version":3,"file":"main.min.js","mappings":"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","sources":["webpack://non-circular-gears/./src/ts/engine/angle-utils.ts","webpack://non-circular-gears/./src/ts/engine/gear.ts","webpack://non-circular-gears/./src/ts/engine/polar-curves.ts","webpack://non-circular-gears/./src/ts/engine/rays.ts","webpack://non-circular-gears/./src/ts/parameters.ts","webpack://non-circular-gears/./src/ts/scenes/random-scene.ts","webpack://non-circular-gears/./src/ts/scenes/scene.ts","webpack://non-circular-gears/./src/ts/svg-canvas.ts","webpack://non-circular-gears/./src/ts/utils.ts","webpack://non-circular-gears/webpack/bootstrap","webpack://non-circular-gears/./src/ts/main.ts"],"sourcesContent":["const TWO_PI = 2 * Math.PI;\r\n\r\nfunction makeAnglePositive(angle: number): number {\r\n    if (angle < 0) {\r\n        angle += TWO_PI * Math.ceil(-angle / TWO_PI);\r\n    }\r\n    return angle;\r\n}\r\nfunction normalizeAngle(angle: number): number {\r\n    angle = makeAnglePositive(angle);\r\n    return angle % TWO_PI;\r\n}\r\n\r\nfunction toDegrees(angleInRadians: number): number {\r\n    return 180 / Math.PI * angleInRadians;\r\n}\r\n\r\nfunction toRadians(angleInDegrees: number): number {\r\n    return Math.PI / 180 * angleInDegrees;\r\n}\r\n\r\nfunction angleDifference(angle1: number, angle2: number): number {\r\n    const rawDifference = normalizeAngle(angle2 - angle1);\r\n    if (rawDifference <= Math.PI) {\r\n        return rawDifference;\r\n    }\r\n    return TWO_PI - rawDifference;\r\n}\r\n\r\nexport {\r\n    angleDifference,\r\n    makeAnglePositive,\r\n    normalizeAngle,\r\n    toDegrees,\r\n    toRadians,\r\n    TWO_PI,\r\n};\r\n\r\n","import { normalizeAngle, toDegrees, TWO_PI } from \"./angle-utils\";\r\nimport type { Point, Vector } from \"./point\";\r\nimport type { PolarCurve } from \"./polar-curves\";\r\nimport { computeDeltaAngle, computeDistance, computeNormal, type Ray, type ReadonlyRay } from \"./rays\";\r\n\r\ntype ReadonlyPoint = {\r\n    readonly x: number;\r\n    readonly y: number;\r\n};\r\n\r\ntype ConstructionResult = {\r\n    distance: number;\r\n    periodRays: Ray[];\r\n    period: number; // can be fractional\r\n    targetPeriod: number; // integer\r\n    error: number; // in [0, 1]\r\n};\r\n\r\ntype Segment = {\r\n    readonly startingRay: ReadonlyRay;\r\n    readonly nextRay: ReadonlyRay;\r\n    readonly deltaAngle: number; // between starting and next rays\r\n    readonly deltaDistance: number; // between starting and next rays\r\n};\r\n\r\ntype SurfaceFragment = {\r\n    point: Point;\r\n    normal: Vector;\r\n};\r\n\r\nenum ESurfaceType {\r\n    NONE,\r\n    SMOOTH,\r\n    TEETH_SMALL,\r\n    TEETH_MEDIUM,\r\n    TEETH_LARGE,\r\n}\r\n\r\ntype SvgRepresentation = {\r\n    readonly container: SVGElement;\r\n    readonly rotationElement: SVGElement;\r\n    readonly gearElement: SVGElement;\r\n    currentSurfaceType: ESurfaceType;\r\n    computedPaths: Record<number, string>;\r\n};\r\n\r\nclass Gear {\r\n    public static readonly centerRadius = 0.015;\r\n\r\n    public static readonly gearClass: string = \"gear\";\r\n    public static readonly gearMainClass: string = \"main\";\r\n    public static readonly gearRaysClass: string = \"gear-rays\";\r\n    public static readonly gearAxisClass: string = \"gear-axis\";\r\n\r\n    public static create(center: ReadonlyPoint, polarCurve: PolarCurve): Gear {\r\n        return new Gear(center, polarCurve.periodRays, polarCurve.periodsCount, +1);\r\n    }\r\n\r\n    public static slaveGear(idealCenter: ReadonlyPoint, master: Gear): Gear | null {\r\n        const dX = idealCenter.x - master.center.x;\r\n        const dY = idealCenter.y - master.center.y;\r\n        const idealDistance = Math.max(master.maxRadius + 0.01, Math.sqrt(dX * dX + dY * dY));\r\n\r\n        const adjustedDistance = Gear.getNextFittingDistance(idealDistance, master);\r\n        const period = Gear.tryBuildCompanionPeriod(adjustedDistance, master);\r\n\r\n        const angle = Math.atan2(dY, dX);\r\n        const center = {\r\n            x: master.center.x + adjustedDistance * Math.cos(angle),\r\n            y: master.center.y + adjustedDistance * Math.sin(angle),\r\n        };\r\n        const newGear = new Gear(center, period.periodRays, period.targetPeriod, -master.orientation, master);\r\n\r\n        return newGear;\r\n    }\r\n\r\n    private static tryBuildCompanionPeriod(distance: number, master: Gear): ConstructionResult {\r\n        const periodRays: Ray[] = [];\r\n        let angle = 0;\r\n\r\n        for (const periodSegment of master.periodSegments) {\r\n            periodRays.push({\r\n                angle,\r\n                radius: distance - periodSegment.startingRay.radius,\r\n            });\r\n\r\n            const dSegmentLengthSquared = periodSegment.deltaDistance * periodSegment.deltaDistance;\r\n\r\n            const r1 = distance - periodSegment.startingRay.radius;\r\n            const r2 = distance - periodSegment.nextRay.radius;\r\n            const dAngle = Math.acos((r1 * r1 + r2 * r2 - dSegmentLengthSquared) / (2 * r1 * r2));\r\n            if (isNaN(dAngle)) {\r\n                throw new Error(\"Should not happen\");\r\n            }\r\n\r\n            angle += dAngle;\r\n        }\r\n\r\n        if (master.orientation > 0) {\r\n            for (const periodRay of periodRays) {\r\n                periodRay.angle = Math.PI - periodRay.angle;\r\n            }\r\n        }\r\n\r\n        const period = TWO_PI / angle;\r\n        const targetPeriod = Math.ceil(period);\r\n        const error = targetPeriod - period;\r\n        return {\r\n            distance,\r\n            periodRays,\r\n            period,\r\n            targetPeriod,\r\n            error,\r\n        };\r\n    }\r\n\r\n    private static getNextFittingDistance(idealDistance: number, master: Gear): number {\r\n        const initialTry = Gear.tryBuildCompanionPeriod(idealDistance, master);\r\n\r\n        let tooLowTry = initialTry;\r\n        let tooHighTry = null as ConstructionResult | null;\r\n\r\n        const maxTries = 200;\r\n        let triesCount = 1;\r\n        while (tooLowTry.error > 0 && triesCount < maxTries) {\r\n            const currentDistance = tooHighTry ? 0.5 * (tooLowTry.distance + tooHighTry.distance) : tooLowTry.distance + 0.5;\r\n            if (currentDistance === tooLowTry.distance || currentDistance === tooHighTry?.distance) {\r\n                // console.debug(\"Convergence\");\r\n                break;\r\n            }\r\n\r\n            const currentTry = Gear.tryBuildCompanionPeriod(currentDistance, master);\r\n            if (currentTry.targetPeriod > tooLowTry.targetPeriod || currentTry.error > tooLowTry.error) {\r\n                tooHighTry = currentTry;\r\n            } else {\r\n                tooLowTry = currentTry;\r\n            }\r\n            triesCount++;\r\n        }\r\n\r\n        const finalTry = tooLowTry;\r\n        // console.debug(`Final error ${finalTry.error} obtained in ${triesCount} tries. Final periodicity ${finalTry.targetPeriod}, initial was ${initialTry.targetPeriod}.`);\r\n        return finalTry.distance;\r\n    }\r\n\r\n    private readonly svgRepresentation: SvgRepresentation;\r\n    public get svgElement(): SVGElement {\r\n        return this.svgRepresentation.container;\r\n    }\r\n\r\n    private readonly periodSegments: ReadonlyArray<Segment>;\r\n    private readonly periodSegmentsReverse: ReadonlyArray<Segment>;\r\n    private readonly periodAngle: number;\r\n    private readonly periodSurface: number;\r\n    public readonly minRadius: number;\r\n    public readonly maxRadius: number;\r\n    private rotation: number = 0;\r\n\r\n    private constructor(\r\n        public readonly center: ReadonlyPoint,\r\n        periodRays: ReadonlyArray<Ray>,\r\n        private readonly periodsCount: number,\r\n        private readonly orientation: number,\r\n        private readonly parent?: Gear) {\r\n        let minRadius = 10000000000;\r\n        let maxRadius = -10000000000;\r\n        periodRays.forEach(ray => {\r\n            ray.angle = normalizeAngle(ray.angle);\r\n            minRadius = Math.min(ray.radius, minRadius);\r\n            maxRadius = Math.max(ray.radius, maxRadius);\r\n        });\r\n        this.minRadius = minRadius;\r\n        this.maxRadius = maxRadius;\r\n\r\n        this.periodAngle = TWO_PI / this.periodsCount;\r\n\r\n        const firstPeriodRay = periodRays[0];\r\n        if (!firstPeriodRay) {\r\n            throw new Error();\r\n        }\r\n        this.periodSegments = periodRays.map((currentRay: Ray, index: number) => {\r\n            let nextRay = periodRays[index + 1];\r\n            if (!nextRay) {\r\n                nextRay = {\r\n                    angle: firstPeriodRay.angle + this.orientation * this.periodAngle,\r\n                    radius: firstPeriodRay.radius,\r\n                };\r\n            }\r\n\r\n            const deltaAngle = computeDeltaAngle(nextRay, currentRay);\r\n            const deltaDistance = computeDistance(nextRay, currentRay);\r\n\r\n            return {\r\n                startingRay: { angle: currentRay.angle, radius: currentRay.radius },\r\n                nextRay,\r\n                deltaAngle,\r\n                deltaDistance,\r\n            };\r\n        });\r\n        this.periodSegmentsReverse = this.periodSegments.slice().reverse();\r\n\r\n        this.periodSurface = 0;\r\n        for (const segment of this.periodSegments) {\r\n            this.periodSurface += segment.deltaDistance;\r\n        }\r\n\r\n        this.svgRepresentation = this.buildSvgRepresentation();\r\n    }\r\n\r\n    public rotate(rotation: number): void {\r\n        if (this.parent) {\r\n            throw new Error(\"Cannot rotate child gear.\");\r\n        }\r\n        this.setRotationInternal(this.rotation + rotation);\r\n    }\r\n\r\n    public update(): void {\r\n        if (!this.parent) {\r\n            return; // nothing to do\r\n        }\r\n\r\n        const previousMasterAngle = this.parent.rotation;\r\n        {\r\n            let relativeRotation = Math.atan2(this.center.y - this.parent.center.y, this.center.x - this.parent.center.x);\r\n            if (this.orientation > 0) {\r\n                relativeRotation = Math.PI + relativeRotation;\r\n            }\r\n            this.parent.setRotationInternal(this.parent.rotation - relativeRotation);\r\n            const surfaceRotation = this.parent.getCurrentRotatedSurface();\r\n            this.rotateFromSurface(surfaceRotation);\r\n            this.setRotationInternal(this.rotation + relativeRotation);\r\n        }\r\n        this.parent.rotation = previousMasterAngle;\r\n    }\r\n\r\n    public updateDisplay(surfaceType: ESurfaceType): void {\r\n        this.svgRepresentation.rotationElement.setAttribute(\"transform\", `rotate(${toDegrees(this.rotation)})`);\r\n\r\n        if (this.svgRepresentation.currentSurfaceType !== surfaceType) {\r\n            const showTeeth = [ESurfaceType.TEETH_SMALL, ESurfaceType.TEETH_MEDIUM, ESurfaceType.TEETH_LARGE].includes(surfaceType);\r\n            if (showTeeth) {\r\n                let path = this.svgRepresentation.computedPaths[surfaceType];\r\n                if (!path) {\r\n                    let idealToothSize;\r\n                    if (surfaceType === ESurfaceType.TEETH_SMALL) {\r\n                        idealToothSize = 0.02;\r\n                    } else if (surfaceType === ESurfaceType.TEETH_MEDIUM) {\r\n                        idealToothSize = 0.04;\r\n                    } else {\r\n                        idealToothSize = 0.06;\r\n                    }\r\n                    const periodPoints = this.buildPeriodPointsWithTeeth(idealToothSize);\r\n                    path = this.buildSvgPath(periodPoints);\r\n                    this.svgRepresentation.computedPaths[surfaceType] = path;\r\n                }\r\n                this.svgRepresentation.gearElement.setAttribute(\"d\", path);\r\n            } else {\r\n                let path = this.svgRepresentation.computedPaths[ESurfaceType.SMOOTH];\r\n                if (!path) {\r\n                    const periodPoints = this.buildPeriodPointsSmooth();\r\n                    path = this.buildSvgPath(periodPoints);\r\n                    this.svgRepresentation.computedPaths[surfaceType] = path;\r\n                }\r\n                this.svgRepresentation.gearElement.setAttribute(\"d\", path);\r\n            }\r\n\r\n            this.svgRepresentation.currentSurfaceType = surfaceType;\r\n        }\r\n    }\r\n\r\n    private setRotationInternal(rotation: number): void {\r\n        this.rotation = normalizeAngle(rotation);\r\n    }\r\n\r\n    private getCurrentRotatedSurface(): number {\r\n        const nbPeriods = Math.floor(this.rotation / this.periodAngle);\r\n        let cumulatedAngle = this.periodAngle * nbPeriods;\r\n        let cumulatedSurface = this.periodSurface * nbPeriods;\r\n\r\n        const periodSegments = (this.orientation > 0) ? this.periodSegmentsReverse : this.periodSegments;\r\n        for (const segment of periodSegments) {\r\n            const nextCumulatedAngle = cumulatedAngle + segment.deltaAngle;\r\n            const nextCumulatedSurface = cumulatedSurface + segment.deltaDistance;\r\n\r\n            if (nextCumulatedAngle >= this.rotation) {\r\n                let partial = 0;\r\n                if (segment.deltaAngle > 0) {\r\n                    partial = (nextCumulatedAngle - this.rotation) / segment.deltaAngle * segment.deltaDistance; // approximation\r\n                }\r\n                return cumulatedSurface + partial;\r\n            }\r\n\r\n            cumulatedAngle = nextCumulatedAngle;\r\n            cumulatedSurface = nextCumulatedSurface;\r\n        }\r\n        throw new Error();\r\n    }\r\n\r\n    private rotateFromSurface(targetSurface: number): void {\r\n        const nbPeriods = Math.floor(targetSurface / this.periodSurface);\r\n        this.rotation = -this.periodAngle * nbPeriods;\r\n        let cumulatedSurface = this.periodSurface * nbPeriods;\r\n\r\n        const periodSegments = (this.orientation < 0) ? this.periodSegmentsReverse : this.periodSegments;\r\n        for (const segment of periodSegments) {\r\n            const nextCumulatedSurface = cumulatedSurface + segment.deltaDistance;\r\n\r\n            if (nextCumulatedSurface >= targetSurface) {\r\n                if (segment.deltaDistance > 0) {\r\n                    const partial = (nextCumulatedSurface - targetSurface) / segment.deltaDistance * segment.deltaAngle; // approximation\r\n                    this.rotation -= partial;\r\n                }\r\n                return;\r\n            }\r\n\r\n            cumulatedSurface = nextCumulatedSurface;\r\n            this.rotation -= segment.deltaAngle;\r\n        }\r\n\r\n        throw new Error();\r\n    }\r\n\r\n    private *walkOnPeriod(stepSize: number): Generator<SurfaceFragment> {\r\n        let positionOnSegment = 0;\r\n        for (const periodSegment of this.periodSegments) {\r\n            const normal = computeNormal(periodSegment.startingRay, periodSegment.nextRay);\r\n\r\n            while (positionOnSegment < periodSegment.deltaDistance) {\r\n                const x = positionOnSegment / periodSegment.deltaDistance; // relative advancement\r\n\r\n                const angle = periodSegment.startingRay.angle + this.orientation * x * periodSegment.deltaAngle;\r\n                const radius = periodSegment.startingRay.radius + x * (periodSegment.nextRay.radius - periodSegment.startingRay.radius);\r\n                const point = {\r\n                    x: radius * Math.cos(angle),\r\n                    y: radius * Math.sin(angle),\r\n                };\r\n                yield { point, normal };\r\n                positionOnSegment += stepSize;\r\n            }\r\n\r\n            positionOnSegment -= periodSegment.deltaDistance;\r\n        }\r\n    }\r\n\r\n    private buildPeriodPointsSmooth(): Point[] {\r\n        const points = this.periodSegments.map(segment => {\r\n            return {\r\n                x: segment.startingRay.radius * Math.cos(segment.startingRay.angle),\r\n                y: segment.startingRay.radius * Math.sin(segment.startingRay.angle),\r\n            };\r\n        });\r\n        return points;\r\n    }\r\n\r\n    private buildPeriodPointsWithTeeth(idealToothSize: number): Point[] {\r\n        const teethCount = Math.ceil(this.periodSurface / idealToothSize);\r\n        const toothSize = this.periodSurface / teethCount;\r\n\r\n        const points: Point[] = [];\r\n        const stepSize = toothSize / 10;\r\n        let i = 0;\r\n        for (const surfaceFragment of this.walkOnPeriod(stepSize)) {\r\n            const cos = Math.cos(i * TWO_PI / toothSize - Math.PI / 2);\r\n            const teethOffset = idealToothSize / 7 * this.orientation * Math.sign(cos) * Math.pow(Math.abs(cos), 1 / 5);\r\n\r\n            points.push({\r\n                x: surfaceFragment.point.x + teethOffset * surfaceFragment.normal.x,\r\n                y: surfaceFragment.point.y + teethOffset * surfaceFragment.normal.y,\r\n            });\r\n            i += stepSize;\r\n        }\r\n        return points;\r\n    }\r\n\r\n    private buildSvgPath(pointsForPeriod: Point[]): string {\r\n        const pathParts = [\"M\"];\r\n\r\n        for (let iP = 0; iP < this.periodsCount; iP++) {\r\n            const periodStartingAngle = this.orientation * iP * this.periodAngle;\r\n            const cos = Math.cos(periodStartingAngle);\r\n            const sin = Math.sin(periodStartingAngle);\r\n\r\n            for (const point of pointsForPeriod) {\r\n                const x = cos * point.x - sin * point.y;\r\n                const y = sin * point.x + cos * point.y;\r\n                pathParts.push(`${x} ${y}`);\r\n            }\r\n        }\r\n\r\n        pathParts.push(\"Z\");\r\n        return pathParts.join(\" \");\r\n    }\r\n\r\n    private buildSvgRepresentation(): SvgRepresentation {\r\n        const containerElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        containerElement.setAttribute(\"transform\", `translate(${this.center.x},${this.center.y})`);\r\n\r\n        const rotationElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        containerElement.appendChild(rotationElement);\r\n\r\n        const gearElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n        gearElement.setAttribute(\"class\", this.parent ? Gear.gearClass : `${Gear.gearClass} ${Gear.gearMainClass}`);\r\n        rotationElement.appendChild(gearElement);\r\n\r\n        const firstPeriodSegment = this.periodSegments[0];\r\n        if (!firstPeriodSegment) {\r\n            throw new Error(\"Gear has no rays.\");\r\n        }\r\n\r\n        // rays\r\n        {\r\n            const length = Math.min(0.75 * firstPeriodSegment.startingRay.radius, 0.05);\r\n\r\n            const pathParts: string[] = [];\r\n            for (let i = 0; i < this.periodsCount; i++) {\r\n                pathParts.push(\"M0 0\");\r\n\r\n                const angle = firstPeriodSegment.startingRay.angle + i * this.periodAngle;\r\n                const x = length * Math.cos(angle);\r\n                const y = length * Math.sin(angle);\r\n                pathParts.push(`L${x} ${y}`);\r\n            }\r\n            const raysElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n            raysElement.setAttribute(\"d\", pathParts.join(\"\"));\r\n            raysElement.setAttribute(\"class\", Gear.gearRaysClass);\r\n            rotationElement.appendChild(raysElement);\r\n        }\r\n\r\n        // center\r\n        {\r\n            let centerElement: SVGElement;\r\n            if (this.periodsCount < 3) {\r\n                centerElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\r\n                centerElement.setAttribute(\"cx\", \"0\");\r\n                centerElement.setAttribute(\"cy\", \"0\");\r\n                centerElement.setAttribute(\"r\", Gear.centerRadius.toString());\r\n            } else {\r\n                const radius = Gear.centerRadius * (1 + 0.1 * Math.max(0, 5 - this.periodsCount + 3));\r\n                const pathParts: string[] = [];\r\n                for (let i = 0; i < this.periodsCount; i++) {\r\n                    const command = (i === 0) ? \"M\" : \"L\";\r\n                    const angle = firstPeriodSegment.startingRay.angle + i * this.periodAngle;\r\n                    const x = radius * Math.cos(angle);\r\n                    const y = radius * Math.sin(angle);\r\n                    pathParts.push(`${command}${x} ${y}`);\r\n                }\r\n                pathParts.push(\"Z\");\r\n                centerElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n                centerElement.setAttribute(\"d\", pathParts.join(\"\"));\r\n            }\r\n            centerElement.setAttribute(\"class\", Gear.gearAxisClass);\r\n            rotationElement.appendChild(centerElement);\r\n        }\r\n\r\n        return {\r\n            container: containerElement,\r\n            rotationElement,\r\n            gearElement,\r\n            currentSurfaceType: ESurfaceType.NONE,\r\n            computedPaths: {},\r\n        };\r\n    }\r\n}\r\n\r\nexport {\r\n    ESurfaceType,\r\n    Gear,\r\n};\r\n\r\n","import { angleDifference, normalizeAngle, toRadians, TWO_PI } from \"./angle-utils\";\r\nimport { Point } from \"./point\";\r\nimport { Ray } from \"./rays\";\r\n\r\ndeclare const vnoise: {\r\n    seed: number,\r\n    fractal2d: (x: number, y: number, octave: number) => number; // returns something in [-2,+2]\r\n}; // from js-value-noise\r\n\r\ntype PolarCurve = {\r\n    periodRays: Ray[];\r\n    periodsCount: number;\r\n};\r\n\r\n// ax +by = c\r\ntype LineEquation = {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n};\r\n\r\ntype CircleEquation = {\r\n    center: Point;\r\n    radius: number;\r\n};\r\n\r\nenum ERadiusChoice {\r\n    NEAREST,\r\n    FURTHEST,\r\n}\r\n\r\nfunction getRadiusForCircle(circleEquation: CircleEquation, angle: number, choice: ERadiusChoice): number {\r\n    const a = -2 * (circleEquation.center.x * Math.cos(angle) + circleEquation.center.y * Math.sin(angle));\r\n    const b = circleEquation.center.x * circleEquation.center.x + circleEquation.center.y * circleEquation.center.y - circleEquation.radius * circleEquation.radius;\r\n\r\n    const det = a * a - 4 * b;\r\n    if (det >= 0) {\r\n        const sqrtDet = Math.sqrt(det);\r\n        if (choice === ERadiusChoice.NEAREST) {\r\n            return 0.5 * (-sqrtDet - a);\r\n        } else {\r\n            return 0.5 * (sqrtDet - a);\r\n        }\r\n\r\n    }\r\n    return NaN;\r\n}\r\n\r\nfunction getLineEquation(p1: Point, p2: Point): LineEquation {\r\n    const a = (p1.y - p2.y) / (p2.x - p1.x);\r\n    const b = 1;\r\n    const c = p1.y + a * p1.x;\r\n    return { a, b, c };\r\n}\r\n\r\nfunction getRadiusForLine(line: LineEquation, angle: number): number {\r\n    const det = line.a * Math.cos(angle) + line.b * Math.sin(angle);\r\n    if (det === 0) {\r\n        return NaN;\r\n    }\r\n    return line.c / det;\r\n}\r\n\r\nfunction buildEllipse(a: number, b: number): PolarCurve {\r\n    const periodsCount = 2;\r\n    const periodStepsCount = 60;\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < periodStepsCount; i++) {\r\n        const percentage = i / periodStepsCount;\r\n        const angle = Math.PI * percentage;\r\n        periodRays.push({\r\n            angle,\r\n            radius: a * b / Math.sqrt(Math.pow(b * Math.cos(angle), 2) + Math.pow(a * Math.sin(angle), 2)),\r\n        });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildCircle(radius: number): PolarCurve {\r\n    const periodsCount = 3;\r\n    const periodSize = 40;\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < periodSize; i++) {\r\n        const percentage = i / periodSize;\r\n        const angle = TWO_PI / periodsCount * percentage;\r\n        periodRays.push({\r\n            angle,\r\n            radius,\r\n        });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildOffCircle(radius: number, centerOffset: number): PolarCurve {\r\n    const center = { x: centerOffset, y: 0 };\r\n    const circleEquation = { center, radius };\r\n\r\n    const periodsCount = 1;\r\n    const raysCount = 120;\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const percentage = i / raysCount;\r\n        const angle = TWO_PI * percentage;\r\n\r\n        const localRadius = getRadiusForCircle(circleEquation, angle, ERadiusChoice.FURTHEST);\r\n        if (isNaN(localRadius)) {\r\n            throw new Error();\r\n        }\r\n        periodRays.push({ angle, radius: localRadius });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildHeart(size: number): PolarCurve {\r\n    const periodsCount = 1;\r\n    const raysCount = 90;\r\n\r\n    const lineEquations: LineEquation[] = [];\r\n    lineEquations.push({ a: 1, b: 1, c: -1 });\r\n    lineEquations.push({ a: -1, b: 1, c: 1 });\r\n    lineEquations.push({ a: 1, b: 0, c: 5 });\r\n\r\n    const bottomCircleRadius = 0.2;\r\n    const bottomCircleEquation: CircleEquation = {\r\n        center: { x: -1 + bottomCircleRadius * Math.SQRT2, y: 0 },\r\n        radius: bottomCircleRadius,\r\n    };\r\n\r\n    const lobesRadius = 0.6;\r\n    const lobesX = lobesRadius * Math.SQRT2 - 0.45;\r\n    const lobesY = 0.95 * lobesRadius;\r\n    const lobesSidesX = lobesX - lobesRadius * Math.SQRT2 + 0.4;\r\n    const lobeCirclesEquations: CircleEquation[] = [\r\n        { center: { x: lobesX, y: lobesY }, radius: lobesRadius },\r\n        { center: { x: lobesX, y: -lobesY }, radius: lobesRadius },\r\n    ];\r\n\r\n    const lobesCentralEquation: CircleEquation = {\r\n        center: { x: 1, y: 0 },\r\n        radius: 0.2,\r\n    };\r\n\r\n    const rotation = 0;\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const percentage = i / raysCount;\r\n        const angle = normalizeAngle(TWO_PI * percentage);\r\n\r\n        let radius = 1000000;\r\n        for (const lineEquation of lineEquations) {\r\n            const localRadius = getRadiusForLine(lineEquation, angle);\r\n            if (!isNaN(localRadius) && localRadius > 0) {\r\n                radius = Math.min(localRadius, radius);\r\n            }\r\n        }\r\n\r\n        {\r\n            const localRadius = getRadiusForCircle(bottomCircleEquation, angle, ERadiusChoice.FURTHEST);\r\n            if (!isNaN(localRadius) && localRadius > 0) {\r\n                const pointX = localRadius * Math.cos(angle);\r\n                if (pointX < 0.5 * (bottomCircleEquation.center.x - 1)) {\r\n                    radius = Math.min(localRadius, radius);\r\n                }\r\n            }\r\n        }\r\n\r\n        {\r\n            for (const lobeCircleEquation of lobeCirclesEquations) {\r\n                const localRadius = getRadiusForCircle(lobeCircleEquation, angle, ERadiusChoice.FURTHEST);\r\n                if (!isNaN(localRadius) && localRadius > 0) {\r\n                    const point = { x: localRadius * Math.cos(angle), y: localRadius * Math.sin(angle) };\r\n                    if (point.y * lobeCircleEquation.center.y >= 0 && point.x > lobesSidesX) {\r\n                        radius = Math.min(localRadius, radius);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        {\r\n            const localRadius = getRadiusForCircle(lobesCentralEquation, angle, ERadiusChoice.NEAREST);\r\n            if (!isNaN(localRadius) && localRadius > 0) {\r\n                const pointX = localRadius * Math.cos(angle);\r\n                if (pointX < 1) {\r\n                    radius = Math.max(localRadius, radius);\r\n                }\r\n            }\r\n        }\r\n\r\n        periodRays.push({\r\n            angle: normalizeAngle(angle - rotation),\r\n            radius: radius * size * 7,\r\n        });\r\n    }\r\n\r\n    periodRays.sort((ray1: Ray, ray2: Ray) => ray1.angle - ray2.angle);\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildPolygon(size: number, sides: number): PolarCurve {\r\n    const periodsCount = sides;\r\n    const raysCount = 40;\r\n\r\n    const periodAngle = TWO_PI / sides;\r\n    const p1 = { x: 1, y: 0 };\r\n    const p2 = { x: Math.cos(periodAngle), y: Math.sin(periodAngle) };\r\n    const lineEquation = getLineEquation(p1, p2);\r\n\r\n    const interiorAngle = toRadians(180 * (sides - 2) / sides);\r\n    const circlesRadius = 0.2;\r\n    const circleDistance = 1 - circlesRadius / Math.sin(interiorAngle / 2);\r\n\r\n    const circles: CircleEquation[] = [{\r\n        center: { x: circleDistance, y: 0 },\r\n        radius: circlesRadius\r\n    }, {\r\n        center: { x: circleDistance * Math.cos(periodAngle), y: circleDistance * Math.sin(periodAngle) },\r\n        radius: circlesRadius\r\n    }];\r\n\r\n    const isCircleRadiusValid = (circleEquation: CircleEquation, angle: number, radius: number): boolean => {\r\n        const intersection = { x: radius * Math.cos(angle), y: radius * Math.sin(angle) };\r\n        const circleAngle = Math.atan2(circleEquation.center.y, circleEquation.center.x);\r\n        const localAngle = Math.atan2(intersection.y - circleEquation.center.y, intersection.x - circleEquation.center.x);\r\n        return angleDifference(circleAngle, localAngle) < Math.PI - Math.PI / 2 - 0.5 * interiorAngle;\r\n    };\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const angle = i / raysCount * periodAngle;\r\n\r\n        let radius = getRadiusForLine(lineEquation, angle);\r\n        for (const circle of circles) {\r\n            const circleRadius = getRadiusForCircle(circle, angle, ERadiusChoice.FURTHEST);\r\n            if (!isNaN(circleRadius)) {\r\n                if (isCircleRadiusValid(circle, angle, circleRadius)) {\r\n                    radius = Math.min(circleRadius, circleRadius);\r\n                }\r\n            }\r\n        }\r\n        periodRays.push({ angle, radius: size * radius });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildOffPolygon(size: number, sides: number, offset: number): PolarCurve {\r\n    const periodsCount = 1;\r\n    const raysCount = 90;\r\n\r\n    const interiorAngle = toRadians(180 * (sides - 2) / sides);\r\n    const circlesRadius = 0.2;\r\n    const circleDistance = 1 - circlesRadius / Math.sin(interiorAngle / 2);\r\n    const circles: CircleEquation[] = [];\r\n\r\n    const periodAngle = TWO_PI / sides;\r\n    const center = { x: offset, y: 0 };\r\n    const points: Point[] = [];\r\n    for (let i = 0; i < sides; i++) {\r\n        const angle = i * periodAngle;\r\n        points.push({\r\n            x: Math.cos(angle) - center.x,\r\n            y: Math.sin(angle) - center.y,\r\n        });\r\n\r\n        circles.push({\r\n            center: { x: -center.x + circleDistance * Math.cos(angle), y: -center.y + circleDistance * Math.sin(angle) },\r\n            radius: circlesRadius,\r\n        });\r\n    }\r\n\r\n    const isCircleRadiusValid = (circleEquation: CircleEquation, angle: number, radius: number): boolean => {\r\n        const intersection = { x: center.x + radius * Math.cos(angle), y: center.y + radius * Math.sin(angle) };\r\n        const realCenter = { x: circleEquation.center.x + center.x, y: circleEquation.center.y + center.y };\r\n        const circleAngle = Math.atan2(realCenter.y, realCenter.x);\r\n        const localAngle = Math.atan2(intersection.y - realCenter.y, intersection.x - realCenter.x);\r\n        return angleDifference(circleAngle, localAngle) < Math.PI - Math.PI / 2 - 0.5 * interiorAngle;\r\n    };\r\n\r\n    const lineEquations = points.map((point: Point, index: number) => {\r\n        const p1 = point;\r\n        const p2 = points[(index + 1) % points.length]!;\r\n        return getLineEquation(p1, p2);\r\n    });\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const angle = i / raysCount * TWO_PI;\r\n\r\n        let minRadius = 100000;\r\n        for (const lineEquation of lineEquations) {\r\n            const radius = getRadiusForLine(lineEquation, angle);\r\n            if (radius > 0 && radius < minRadius) {\r\n                minRadius = radius;\r\n            }\r\n        }\r\n\r\n        for (const circle of circles) {\r\n            const circleRadius = getRadiusForCircle(circle, angle, ERadiusChoice.FURTHEST);\r\n            if (!isNaN(circleRadius)) {\r\n                if (circleRadius > 0 && isCircleRadiusValid(circle, angle, circleRadius)) {\r\n                    minRadius = Math.min(circleRadius, circleRadius);\r\n                }\r\n            }\r\n        }\r\n\r\n        periodRays.push({ angle, radius: size * minRadius });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildRandom(size: number): PolarCurve {\r\n    const periodsCount = 1;\r\n    const raysCount = 90;\r\n\r\n    const range = size * 1.5;\r\n\r\n    vnoise.seed = Math.random();\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const angle = TWO_PI * i / raysCount;\r\n        const noise = vnoise.fractal2d(Math.cos(angle), Math.sin(angle), 2) * 0.25; // in [-0.5,+0.5]\r\n        periodRays.push({\r\n            angle,\r\n            radius: size + range * noise,\r\n        });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nexport type {\r\n    PolarCurve,\r\n};\r\nexport {\r\n    buildCircle,\r\n    buildEllipse,\r\n    buildHeart,\r\n    buildOffCircle,\r\n    buildOffPolygon,\r\n    buildPolygon,\r\n    buildRandom,\r\n};\r\n\r\n","import { angleDifference } from \"./angle-utils\";\r\nimport type { Point, Vector } from \"./point\";\r\n\r\ntype Ray = {\r\n    angle: number;\r\n    radius: number;\r\n};\r\n\r\ntype ReadonlyRay = {\r\n    readonly angle: number;\r\n    readonly radius: number;\r\n};\r\n\r\nfunction computeRayPoint(ray: Ray): Point {\r\n    return {\r\n        x: ray.radius * Math.cos(ray.angle),\r\n        y: ray.radius * Math.sin(ray.angle),\r\n    };\r\n}\r\n\r\nfunction computeDeltaAngle(ray1: Ray, ray2: Ray): number {\r\n    return angleDifference(ray1.angle, ray2.angle);\r\n}\r\n\r\nfunction computeDistanceSquared(ray1: Ray, ray2: Ray): number {\r\n    const deltaAngle = computeDeltaAngle(ray1, ray2);\r\n    return (ray1.radius * ray1.radius) + (ray2.radius * ray2.radius) - 2 * ray1.radius * ray2.radius * Math.cos(deltaAngle);\r\n}\r\n\r\nfunction computeDistance(ray1: Ray, ray2: Ray): number {\r\n    return Math.sqrt(computeDistanceSquared(ray1, ray2));\r\n}\r\n\r\nfunction computeNormal(ray1: Ray, ray2: Ray): Vector {\r\n    const point1 = computeRayPoint(ray1);\r\n    const point2 = computeRayPoint(ray2);\r\n\r\n    const normal = {\r\n        x: -(point2.y - point1.y),\r\n        y: point2.x - point1.x,\r\n    };\r\n    const length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);\r\n    normal.x /= length;\r\n    normal.y /= length;\r\n\r\n    if (point1.x * normal.x + point1.y * normal.y < 0) {\r\n        normal.x *= -1;\r\n        normal.y *= -1;\r\n    }\r\n    return normal;\r\n}\r\n\r\nexport type {\r\n    Ray,\r\n    ReadonlyRay,\r\n};\r\nexport {\r\n    computeDeltaAngle,\r\n    computeDistance,\r\n    computeDistanceSquared,\r\n    computeNormal,\r\n};\r\n\r\n\r\n","/// <reference types=\"./page-interface-generated\" />\r\n\r\nconst controlId = {\r\n    CENTRAL_GEAR_SELECT_ID: \"central-gear-select-id\",\r\n    SHIFT_CENTER_CHECKBOX_ID: \"shift-center-checkbox-id\",\r\n    ROTATION_SPEED_RANGE: \"rotation-speed-range-id\",\r\n    RESET_BUTTON_ID: \"reset-button\",\r\n    RANDOM_BUTTON_ID: \"random-button\",\r\n    DISPLAY_STYLE_TABS_ID: \"display-style-tabs-id\",\r\n    SHOW_RAYS_CHECKBOX_ID: \"show-rays-checkbox-id\",\r\n    SHOW_TEETH_CHECKBOX_ID: \"show-teeth-checkbox-id\",\r\n    TEETH_SIZE_TABS_ID: \"teeth-size-tabs-id\",\r\n    DOWNLOAD_BUTTON_ID: \"download-button\",\r\n};\r\n\r\nenum EGearShape {\r\n    ELLIPSE = \"ellipse\",\r\n    HEART = \"heart\",\r\n    TRIANGLE = \"triangle\",\r\n    SQUARE = \"square\",\r\n    PENTAGON = \"pentagon\",\r\n    RANDOM = \"random\",\r\n    CIRCLE = \"circle\",\r\n    OFF_CIRCLE = \"off-circle\",\r\n    OFF_TRIANGLE = \"off-triangle\",\r\n    OFF_SQUARE = \"off-square\",\r\n    OFF_PENTAGON = \"off-pentagon\",\r\n}\r\n\r\nenum EDisplayStyle {\r\n    FLAT = \"flat\",\r\n    OUTLINE = \"outline\",\r\n}\r\n\r\nenum ETeethSize {\r\n    SMALL = \"small\",\r\n    MEDIUM = \"medium\",\r\n    LARGE = \"large\",\r\n}\r\n\r\nfunction callCallbacks(callbacks: VoidFunction[]): void {\r\n    for (const callback of callbacks) {\r\n        callback();\r\n    }\r\n}\r\n\r\nPage.Select.addObserver(controlId.CENTRAL_GEAR_SELECT_ID, () => {\r\n    callCallbacks(Parameters.onGearShapeChange);\r\n});\r\nPage.Checkbox.addObserver(controlId.SHIFT_CENTER_CHECKBOX_ID, () => {\r\n    callCallbacks(Parameters.onGearShapeChange);\r\n});\r\n\r\nPage.Button.addObserver(controlId.RESET_BUTTON_ID, () => {\r\n    callCallbacks(Parameters.onReset);\r\n});\r\n\r\nPage.Button.addObserver(controlId.DOWNLOAD_BUTTON_ID, () => {\r\n    callCallbacks(Parameters.onDownload);\r\n});\r\n\r\nPage.Button.addObserver(controlId.RANDOM_BUTTON_ID, () => {\r\n    const gearShapes = Object.values(EGearShape);\r\n    const shapeId = Math.floor(Math.random() * gearShapes.length);\r\n    const gearShape = gearShapes[shapeId] as string;\r\n    Page.Select.setValue(controlId.CENTRAL_GEAR_SELECT_ID, gearShape);\r\n    callCallbacks(Parameters.onReset);\r\n});\r\n\r\nfunction onDisplayStyleChange(): void {\r\n    callCallbacks(Parameters.onDisplayStyleChange);\r\n}\r\nPage.Tabs.addObserver(controlId.DISPLAY_STYLE_TABS_ID, onDisplayStyleChange);\r\nPage.Checkbox.addObserver(controlId.SHOW_RAYS_CHECKBOX_ID, onDisplayStyleChange);\r\n\r\nabstract class Parameters {\r\n    public static get rotationSpeed(): number {\r\n        return Page.Range.getValue(controlId.ROTATION_SPEED_RANGE);\r\n    }\r\n\r\n    public static get gearShape(): EGearShape {\r\n        const gearShape = Page.Select.getValue(controlId.CENTRAL_GEAR_SELECT_ID) as EGearShape;\r\n        if (Parameters.shiftCenter) {\r\n            if (gearShape === EGearShape.CIRCLE) {\r\n                return EGearShape.OFF_CIRCLE;\r\n            } else if (gearShape === EGearShape.TRIANGLE) {\r\n                return EGearShape.OFF_TRIANGLE;\r\n            } else if (gearShape === EGearShape.SQUARE) {\r\n                return EGearShape.OFF_SQUARE;\r\n            } else if (gearShape === EGearShape.PENTAGON) {\r\n                return EGearShape.OFF_PENTAGON;\r\n            }\r\n        }\r\n        return gearShape;\r\n    }\r\n\r\n    public static get displayStyle(): EDisplayStyle {\r\n        return Page.Tabs.getValues(controlId.DISPLAY_STYLE_TABS_ID)[0] as EDisplayStyle;\r\n    }\r\n    public static get showRays(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_RAYS_CHECKBOX_ID);\r\n    }\r\n\r\n    public static get showTeeth(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_TEETH_CHECKBOX_ID);\r\n    }\r\n\r\n    public static get teethSize(): ETeethSize {\r\n        return Page.Tabs.getValues(controlId.TEETH_SIZE_TABS_ID)[0] as ETeethSize;\r\n    }\r\n\r\n    private static get shiftCenter(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHIFT_CENTER_CHECKBOX_ID);\r\n    }\r\n\r\n    public static onGearShapeChange: VoidFunction[] = [];\r\n\r\n    public static onReset: VoidFunction[] = [];\r\n\r\n    public static onDownload: VoidFunction[] = [];\r\n\r\n    public static onDisplayStyleChange: VoidFunction[] = [];\r\n}\r\n\r\nfunction updateTeethSizeControls(): void {\r\n    Page.Controls.setVisibility(controlId.TEETH_SIZE_TABS_ID, Parameters.showTeeth);\r\n}\r\nPage.Checkbox.addObserver(controlId.SHOW_TEETH_CHECKBOX_ID, updateTeethSizeControls);\r\nupdateTeethSizeControls();\r\n\r\nfunction updateShiftCenterControl(): void {\r\n    const gearShape = Page.Select.getValue(controlId.CENTRAL_GEAR_SELECT_ID) as EGearShape;\r\n    const visible = [EGearShape.CIRCLE, EGearShape.TRIANGLE, EGearShape.SQUARE, EGearShape.PENTAGON].includes(gearShape);\r\n    Page.Controls.setVisibility(controlId.SHIFT_CENTER_CHECKBOX_ID, visible);\r\n}\r\nPage.Select.addObserver(controlId.CENTRAL_GEAR_SELECT_ID, updateShiftCenterControl);\r\nupdateShiftCenterControl();\r\n\r\nexport {\r\n    EDisplayStyle,\r\n    EGearShape,\r\n    ETeethSize,\r\n    Parameters,\r\n};\r\n\r\n","import { Gear } from \"../engine/gear\";\r\nimport type { PolarCurve } from \"../engine/polar-curves\";\r\nimport * as PolarCurves from \"../engine/polar-curves\";\r\nimport { EGearShape } from \"../parameters\";\r\nimport { SvgCanvas } from \"../svg-canvas\";\r\nimport { distance } from \"../utils\";\r\nimport { Scene } from \"./scene\";\r\n\r\nfunction rand(min: number, max: number): number {\r\n    return min + (max - min) * Math.random();\r\n}\r\n\r\nclass RandomScene extends Scene {\r\n    public static create(svgCanvas: SvgCanvas, centralGear: EGearShape): RandomScene {\r\n        let bestScene = new RandomScene(svgCanvas, centralGear);\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            const scene = new RandomScene(svgCanvas, centralGear);\r\n            if (scene.secondaryGears.length > bestScene.secondaryGears.length) {\r\n                bestScene = scene;\r\n            }\r\n        }\r\n\r\n        return bestScene;\r\n    }\r\n\r\n    private constructor(svgCanvas: SvgCanvas, centralGear: EGearShape) {\r\n        const size = 0.1;\r\n\r\n        let polarCurve: PolarCurve;\r\n        switch (centralGear) {\r\n            case EGearShape.ELLIPSE:\r\n                polarCurve = PolarCurves.buildEllipse(size, rand(0.4, 0.7) * size);\r\n                break;\r\n            case EGearShape.HEART:\r\n                polarCurve = PolarCurves.buildHeart(0.17 * size);\r\n                break;\r\n            case EGearShape.OFF_CIRCLE:\r\n                polarCurve = PolarCurves.buildOffCircle(size, rand(0.3, 0.9) * size);\r\n                break;\r\n            case EGearShape.TRIANGLE:\r\n                polarCurve = PolarCurves.buildPolygon(size, 3);\r\n                break;\r\n            case EGearShape.SQUARE:\r\n                polarCurve = PolarCurves.buildPolygon(size, 4);\r\n                break;\r\n            case EGearShape.PENTAGON:\r\n                polarCurve = PolarCurves.buildPolygon(size, 5);\r\n                break;\r\n            case EGearShape.OFF_TRIANGLE:\r\n                polarCurve = PolarCurves.buildOffPolygon(size, 3, rand(0.3, 0.5));\r\n                break;\r\n            case EGearShape.OFF_SQUARE:\r\n                polarCurve = PolarCurves.buildOffPolygon(size, 4, rand(0.3, 0.5));\r\n                break;\r\n            case EGearShape.OFF_PENTAGON:\r\n                polarCurve = PolarCurves.buildOffPolygon(size, 5, rand(0.3, 0.5));\r\n                break;\r\n            case EGearShape.CIRCLE:\r\n                polarCurve = PolarCurves.buildCircle(size);\r\n                break;\r\n            case EGearShape.RANDOM:\r\n                polarCurve = PolarCurves.buildRandom(size);\r\n                break;\r\n            default:\r\n                throw new Error(centralGear);\r\n        }\r\n\r\n        const mainGear = Gear.create({ x: 0, y: 0 }, polarCurve);\r\n\r\n        super(svgCanvas, mainGear);\r\n\r\n        this.secondaryGears = [];\r\n\r\n        const viewportWidth = svgCanvas.width;\r\n        const viewportHeight = svgCanvas.height;\r\n        for (let i = 0; i < 300; i++) {\r\n            const center = {\r\n                x: rand(-0.5 * viewportWidth, 0.5 * viewportWidth),\r\n                y: rand(-0.5 * viewportHeight, 0.5 * viewportHeight),\r\n            };\r\n            const isInsideGear = !!this.allGears.find(existingGear => distance(center, existingGear.center) < existingGear.minRadius);\r\n            if (isInsideGear) {\r\n                continue;\r\n            }\r\n\r\n            const newGear = this.tryBuildGear(center);\r\n            if (newGear && newGear.minRadius > 1.2 * Gear.centerRadius && newGear.maxRadius < 0.3) {\r\n                this.secondaryGears.push(newGear);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    RandomScene,\r\n};\r\n\r\n","/// <reference types=\"../page-interface-generated\" />\r\n\r\nimport { ESurfaceType, Gear } from \"../engine/gear\";\r\nimport { Point } from \"../engine/point\";\r\nimport { EDisplayStyle, ETeethSize, Parameters } from \"../parameters\";\r\nimport { SvgCanvas } from \"../svg-canvas\";\r\nimport { distance } from \"../utils\";\r\n\r\nfunction removeFromArray<T>(array: T[], element: T): void {\r\n    while (array.length > 0) {\r\n        const index = array.indexOf(element);\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        array.splice(index, 1);\r\n    }\r\n}\r\n\r\nabstract class Scene {\r\n    protected readonly mainGear: Gear;\r\n    protected secondaryGears: Gear[] = [];\r\n\r\n    private readonly svgCanvas: SvgCanvas;\r\n\r\n    private readonly onMouseMove: VoidFunction;\r\n    private readonly onMouseUp: VoidFunction;\r\n\r\n    private mobileGear: Gear | null = null;\r\n\r\n    protected constructor(svgCanvas: SvgCanvas, mainGear: Gear) {\r\n        this.svgCanvas = svgCanvas;\r\n\r\n        const updateStyle = (): void => {\r\n            const gearColor = \"red\";\r\n            const gearMainColor = \"#FF6A00\";\r\n\r\n            const axisColor = \"#333333\";\r\n            const flatStyle = (Parameters.displayStyle === EDisplayStyle.FLAT);\r\n            const newStyle = `.${Gear.gearClass} {\r\n    fill:           ${gearColor};\r\n    fill-opacity:   ${flatStyle ? 0.7 : 0.4};\r\n    stroke:         ${gearColor};\r\n    stroke-width:   ${flatStyle ? 0 : 0.004};\r\n}\r\n.${Gear.gearClass}.${Gear.gearMainClass} {\r\n    fill:   ${gearMainColor};\r\n    stroke: ${gearMainColor};\r\n}\r\n.${Gear.gearRaysClass} {\r\n    ${Parameters.showRays ? \"\" : \"display: none;\"}\r\n    stroke:         ${axisColor};\r\n    stroke-width:   0.006;\r\n}\r\n.${Gear.gearAxisClass} {\r\n    fill: ${axisColor};\r\n}`;\r\n            this.svgCanvas.setStyle(newStyle);\r\n        };\r\n        Parameters.onDisplayStyleChange.push(updateStyle);\r\n        updateStyle();\r\n\r\n        this.mainGear = mainGear;\r\n\r\n        this.onMouseMove = () => {\r\n            const aspectRatio = Page.Canvas.getAspectRatio();\r\n            const mousePosition = Page.Canvas.getMousePosition();\r\n            const center = {\r\n                x: (2 * mousePosition[0] - 1) * Math.max(1, aspectRatio),\r\n                y: (2 * mousePosition[1] - 1) * Math.max(1, 1 / aspectRatio),\r\n            };\r\n\r\n            if (this.mobileGear) {\r\n                this.svgCanvas.removeChild(this.mobileGear.svgElement);\r\n            }\r\n            this.mobileGear = this.tryBuildGear(center);\r\n\r\n            if (this.mobileGear) {\r\n                this.svgCanvas.cursor = \"\";\r\n                this.svgCanvas.addChild(this.mobileGear.svgElement);\r\n            } else {\r\n                this.svgCanvas.cursor = \"not-allowed\";\r\n            }\r\n        };\r\n\r\n        this.onMouseUp = () => {\r\n            if (this.mobileGear) {\r\n                this.secondaryGears.push(this.mobileGear);\r\n                this.mobileGear = null;\r\n            }\r\n        };\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        this.mainGear.rotate(5 * dt * Parameters.rotationSpeed / 1000);\r\n\r\n        for (const secondaryGear of this.secondaryGears) {\r\n            secondaryGear.update();\r\n        }\r\n\r\n        this.mobileGear?.update();\r\n\r\n        this.updateDisplay();\r\n    }\r\n\r\n    public attach(): void {\r\n        this.detach();\r\n\r\n        Page.Canvas.Observers.mouseMove.push(this.onMouseMove);\r\n        Page.Canvas.Observers.mouseUp.push(this.onMouseUp);\r\n\r\n        for (const gear of [this.mainGear, ...this.secondaryGears]) {\r\n            this.svgCanvas.addChild(gear.svgElement);\r\n        }\r\n    }\r\n\r\n    public detach(): void {\r\n        removeFromArray(Page.Canvas.Observers.mouseMove, this.onMouseMove);\r\n        removeFromArray(Page.Canvas.Observers.mouseUp, this.onMouseUp);\r\n    }\r\n\r\n    protected tryBuildGear(center: Point): Gear | null {\r\n        const closestGear = this.findClosestGear(center);\r\n\r\n        let newGear: Gear | null = null;\r\n        try {\r\n            newGear = Gear.slaveGear(center, closestGear);\r\n        } catch (e: unknown) {\r\n            console.debug(e);\r\n        }\r\n\r\n        if (newGear) {\r\n            for (const existingGear of this.allGears) {\r\n                if (existingGear !== closestGear) {\r\n                    const margin = distance(newGear.center, existingGear.center) - newGear.maxRadius - existingGear.maxRadius;\r\n                    if (margin <= 0) {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return newGear;\r\n    }\r\n\r\n    protected get allGears(): Gear[] {\r\n        return [this.mainGear, ...this.secondaryGears];\r\n    }\r\n\r\n    private updateDisplay(): void {\r\n        const showTeeth = Parameters.showTeeth;\r\n        const teethSize = Parameters.teethSize;\r\n        let surfaceType: ESurfaceType;\r\n        if (showTeeth) {\r\n            if (teethSize === ETeethSize.SMALL) {\r\n                surfaceType = ESurfaceType.TEETH_SMALL;\r\n            } else if (teethSize === ETeethSize.MEDIUM) {\r\n                surfaceType = ESurfaceType.TEETH_MEDIUM;\r\n            } else {\r\n                surfaceType = ESurfaceType.TEETH_LARGE;\r\n            }\r\n        } else {\r\n            surfaceType = ESurfaceType.SMOOTH;\r\n        }\r\n\r\n        for (const gear of this.allGears) {\r\n            gear.updateDisplay(surfaceType);\r\n        }\r\n        this.mobileGear?.updateDisplay(surfaceType);\r\n    }\r\n\r\n    private findClosestGear(center: Point): Gear {\r\n        let closestGear = this.mainGear;\r\n        let lowestDistance = distance(center, closestGear.center) - closestGear.maxRadius;\r\n\r\n        for (const gear of this.secondaryGears) {\r\n            const currentDistance = distance(center, gear.center) - gear.maxRadius;\r\n            if (currentDistance < lowestDistance) {\r\n                closestGear = gear;\r\n                lowestDistance = currentDistance;\r\n            }\r\n        }\r\n\r\n        return closestGear;\r\n    }\r\n}\r\n\r\nexport {\r\n    Scene,\r\n};\r\n\r\n","/// <reference types=\"./page-interface-generated\" />\r\n\r\nimport { downloadTextFile } from \"./utils\";\r\n\r\nclass SvgCanvas {\r\n    private readonly svg: SVGSVGElement;\r\n    private readonly styleElement: SVGStyleElement;\r\n    private readonly backgroundElement: SVGElement;\r\n    private readonly canvasContainer: HTMLElement;\r\n\r\n    public constructor() {\r\n        this.svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        this.svg.style.position = \"absolute\";\r\n        this.svg.style.top = \"0\";\r\n        this.svg.style.left = \"0\";\r\n        this.svg.style.width = \"100%\";\r\n        this.svg.style.height = \"100%\";\r\n        this.svg.style.pointerEvents = \"none\";\r\n\r\n        this.styleElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\");\r\n        this.svg.appendChild(this.styleElement);\r\n\r\n        this.backgroundElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n        this.backgroundElement.setAttribute(\"x\", \"-100%\");\r\n        this.backgroundElement.setAttribute(\"y\", \"-100%\");\r\n        this.backgroundElement.setAttribute(\"width\", \"200%\");\r\n        this.backgroundElement.setAttribute(\"height\", \"200%\");\r\n        this.backgroundElement.setAttribute(\"fill\", \"black\");\r\n        this.svg.appendChild(this.backgroundElement);\r\n\r\n        const adjustAspectRatio = (): void => {\r\n            const width = this.width;\r\n            const height = this.height;\r\n            this.svg.setAttribute(\"viewBox\", `${-0.5 * width} ${-0.5 * height} ${width} ${height}`);\r\n        };\r\n        Page.Canvas.Observers.canvasResize.push(adjustAspectRatio);\r\n        adjustAspectRatio();\r\n\r\n        this.canvasContainer = Page.Canvas.getCanvasContainer()!;\r\n        this.canvasContainer.insertBefore(this.svg, Page.Canvas.getCanvas());\r\n    }\r\n\r\n    public clear(): void {\r\n        let child = this.svg.firstChild;\r\n        while (child) {\r\n            this.svg.removeChild(child);\r\n            child = this.svg.firstChild;\r\n        }\r\n        this.svg.appendChild(this.styleElement);\r\n        this.svg.appendChild(this.backgroundElement);\r\n    }\r\n\r\n    public removeChild(child: SVGElement): void {\r\n        this.svg.removeChild(child);\r\n    }\r\n\r\n    public addChild(element: SVGElement): void {\r\n        this.svg.appendChild(element);\r\n    }\r\n\r\n    public download(): void {\r\n        this.svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n        this.svg.setAttribute(\"version\", \"1.1\");\r\n        const content = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n${this.svg.outerHTML}`;\r\n        this.svg.removeAttribute(\"xmlns\");\r\n        this.svg.removeAttribute(\"version\");\r\n\r\n        downloadTextFile(\"gears.svg\", content);\r\n    }\r\n\r\n    public setStyle(style: string): void {\r\n        this.styleElement.innerHTML = style;\r\n    }\r\n\r\n    public get width(): number {\r\n        return 2 * Math.max(1, Page.Canvas.getAspectRatio());\r\n    }\r\n\r\n    public get height(): number {\r\n        return 2 * Math.max(1, 1 / Page.Canvas.getAspectRatio());\r\n    }\r\n\r\n    public set cursor(cursor: string) {\r\n        this.canvasContainer.style.cursor = cursor;\r\n    }\r\n}\r\n\r\nexport {\r\n    SvgCanvas,\r\n};\r\n\r\n","import { Point } from \"./engine/point\";\r\n\r\nfunction distanceSquared(p1: Point, p2: Point): number {\r\n    const dX = p1.x - p2.x;\r\n    const dY = p1.y - p2.y;\r\n    return dX * dX + dY * dY;\r\n}\r\n\r\nfunction distance(p1: Point, p2: Point): number {\r\n    const squared = distanceSquared(p1, p2);\r\n    return Math.sqrt(squared);\r\n}\r\n\r\nfunction downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof (window.navigator as any).msSaveBlob !== \"undefined\") { // for IE\r\n        (window.navigator as any).msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset[\"downloadurl\"] = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nexport {\r\n    distance,\r\n    distanceSquared,\r\n    downloadTextFile,\r\n};\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/// <reference types=\"./page-interface-generated\" />\r\n\r\nimport { Parameters } from \"./parameters\";\r\nimport { RandomScene } from \"./scenes/random-scene\";\r\nimport { SvgCanvas } from \"./svg-canvas\";\r\n\r\n\r\nfunction main(): void {\r\n    const svgCanvas = new SvgCanvas();\r\n\r\n    let scene = RandomScene.create(svgCanvas, Parameters.gearShape);\r\n    scene.attach();\r\n\r\n    function resetScene(): void {\r\n        scene.detach();\r\n        svgCanvas.clear();\r\n        scene = RandomScene.create(svgCanvas, Parameters.gearShape);\r\n        scene.attach();\r\n    }\r\n    Parameters.onGearShapeChange.push(resetScene);\r\n    Parameters.onReset.push(resetScene);\r\n    Parameters.onDownload.push(() => svgCanvas.download());\r\n\r\n    let lastUpdate = performance.now();\r\n    function mainLoop(): void {\r\n        const now = performance.now();\r\n        const dt = now - lastUpdate;\r\n        lastUpdate = now;\r\n\r\n        scene.update(dt);\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n"],"names":["TWO_PI","Math","PI","makeAnglePositive","angle","ceil","normalizeAngle","toDegrees","angleInRadians","toRadians","angleInDegrees","angleDifference","angle1","angle2","rawDifference","ESurfaceType","Gear","static","center","polarCurve","periodRays","periodsCount","idealCenter","master","dX","x","dY","y","idealDistance","max","maxRadius","sqrt","adjustedDistance","getNextFittingDistance","period","tryBuildCompanionPeriod","atan2","cos","sin","targetPeriod","orientation","distance","periodSegment","periodSegments","push","radius","startingRay","dSegmentLengthSquared","deltaDistance","r1","r2","nextRay","dAngle","acos","isNaN","Error","periodRay","error","tooLowTry","tooHighTry","triesCount","currentDistance","currentTry","svgElement","this","svgRepresentation","container","parent","rotation","minRadius","forEach","ray","min","periodAngle","firstPeriodRay","map","currentRay","index","deltaAngle","computeDeltaAngle","computeDistance","periodSegmentsReverse","slice","reverse","periodSurface","segment","buildSvgRepresentation","rotate","setRotationInternal","update","previousMasterAngle","relativeRotation","surfaceRotation","getCurrentRotatedSurface","rotateFromSurface","updateDisplay","surfaceType","rotationElement","setAttribute","currentSurfaceType","TEETH_SMALL","TEETH_MEDIUM","TEETH_LARGE","includes","path","computedPaths","idealToothSize","periodPoints","buildPeriodPointsWithTeeth","buildSvgPath","gearElement","SMOOTH","buildPeriodPointsSmooth","nbPeriods","floor","cumulatedAngle","cumulatedSurface","nextCumulatedAngle","nextCumulatedSurface","partial","targetSurface","stepSize","positionOnSegment","normal","computeNormal","point","teethCount","toothSize","points","i","surfaceFragment","walkOnPeriod","teethOffset","sign","pow","abs","pointsForPeriod","pathParts","iP","periodStartingAngle","join","containerElement","document","createElementNS","appendChild","gearClass","gearMainClass","firstPeriodSegment","length","raysElement","gearRaysClass","centerElement","centerRadius","toString","command","gearAxisClass","NONE","ERadiusChoice","getRadiusForCircle","circleEquation","choice","a","det","sqrtDet","NEAREST","NaN","getLineEquation","p1","p2","b","c","getRadiusForLine","line","buildEllipse","percentage","buildCircle","buildOffCircle","centerOffset","localRadius","FURTHEST","buildHeart","size","lineEquations","bottomCircleEquation","SQRT2","lobesRadius","lobesX","lobesSidesX","lobeCirclesEquations","lobesCentralEquation","lineEquation","lobeCircleEquation","sort","ray1","ray2","buildPolygon","sides","interiorAngle","circleDistance","circles","isCircleRadiusValid","intersection","circleAngle","localAngle","circle","circleRadius","buildOffPolygon","offset","realCenter","buildRandom","range","vnoise","seed","random","noise","fractal2d","computeRayPoint","computeDistanceSquared","point1","point2","controlId","CENTRAL_GEAR_SELECT_ID","SHIFT_CENTER_CHECKBOX_ID","ROTATION_SPEED_RANGE","RESET_BUTTON_ID","RANDOM_BUTTON_ID","DISPLAY_STYLE_TABS_ID","SHOW_RAYS_CHECKBOX_ID","SHOW_TEETH_CHECKBOX_ID","TEETH_SIZE_TABS_ID","DOWNLOAD_BUTTON_ID","EGearShape","EDisplayStyle","ETeethSize","callCallbacks","callbacks","callback","onDisplayStyleChange","Parameters","Page","Select","addObserver","onGearShapeChange","Checkbox","Button","onReset","onDownload","gearShapes","Object","values","gearShape","setValue","Tabs","rotationSpeed","Range","getValue","shiftCenter","CIRCLE","OFF_CIRCLE","TRIANGLE","OFF_TRIANGLE","SQUARE","OFF_SQUARE","PENTAGON","OFF_PENTAGON","displayStyle","getValues","showRays","isChecked","showTeeth","teethSize","updateTeethSizeControls","Controls","setVisibility","updateShiftCenterControl","visible","rand","RandomScene","Scene","svgCanvas","centralGear","bestScene","scene","secondaryGears","ELLIPSE","PolarCurves","HEART","RANDOM","super","create","viewportWidth","width","viewportHeight","height","allGears","find","existingGear","newGear","tryBuildGear","removeFromArray","array","element","indexOf","splice","mainGear","mobileGear","updateStyle","gearMainColor","axisColor","flatStyle","FLAT","newStyle","setStyle","onMouseMove","aspectRatio","Canvas","getAspectRatio","mousePosition","getMousePosition","removeChild","cursor","addChild","onMouseUp","dt","secondaryGear","attach","detach","Observers","mouseMove","mouseUp","gear","closestGear","findClosestGear","slaveGear","e","console","debug","SMALL","MEDIUM","lowestDistance","SvgCanvas","svg","style","position","top","left","pointerEvents","styleElement","backgroundElement","adjustAspectRatio","canvasResize","canvasContainer","getCanvasContainer","insertBefore","getCanvas","clear","child","firstChild","download","content","outerHTML","removeAttribute","downloadTextFile","innerHTML","distanceSquared","squared","fileName","fileType","blob","Blob","type","window","navigator","msSaveBlob","objectUrl","URL","createObjectURL","linkElement","createElement","href","dataset","display","body","click","setTimeout","revokeObjectURL","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","resetScene","lastUpdate","performance","now","requestAnimationFrame","mainLoop","main"],"sourceRoot":""}