{"version":3,"file":"main.min.js","mappings":"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","sources":["webpack://non-circular-gears/./src/ts/engine/angle-utils.ts","webpack://non-circular-gears/./src/ts/engine/gear.ts","webpack://non-circular-gears/./src/ts/engine/polar-curves.ts","webpack://non-circular-gears/./src/ts/engine/rays.ts","webpack://non-circular-gears/./src/ts/parameters.ts","webpack://non-circular-gears/./src/ts/scenes/random-scene.ts","webpack://non-circular-gears/./src/ts/scenes/scene.ts","webpack://non-circular-gears/./src/ts/svg-canvas.ts","webpack://non-circular-gears/./src/ts/utils.ts","webpack://non-circular-gears/webpack/bootstrap","webpack://non-circular-gears/./src/ts/main.ts"],"sourcesContent":["const TWO_PI = 2 * Math.PI;\r\n\r\nfunction makeAnglePositive(angle: number): number {\r\n    if (angle < 0) {\r\n        angle += TWO_PI * Math.ceil(-angle / TWO_PI);\r\n    }\r\n    return angle;\r\n}\r\nfunction normalizeAngle(angle: number): number {\r\n    angle = makeAnglePositive(angle);\r\n    return angle % TWO_PI;\r\n}\r\n\r\nfunction toDegrees(angleInRadians: number): number {\r\n    return 180 / Math.PI * angleInRadians;\r\n}\r\n\r\nfunction toRadians(angleInDegrees: number): number {\r\n    return Math.PI / 180 * angleInDegrees;\r\n}\r\n\r\nfunction angleDifference(angle1: number, angle2: number): number {\r\n    const rawDifference = normalizeAngle(angle2 - angle1);\r\n    if (rawDifference <= Math.PI) {\r\n        return rawDifference;\r\n    }\r\n    return TWO_PI - rawDifference;\r\n}\r\n\r\nexport {\r\n    angleDifference,\r\n    makeAnglePositive,\r\n    normalizeAngle,\r\n    toDegrees,\r\n    toRadians,\r\n    TWO_PI,\r\n};\r\n\r\n","import { normalizeAngle, toDegrees, TWO_PI } from \"./angle-utils\";\r\nimport type { Point, Vector } from \"./point\";\r\nimport type { PolarCurve } from \"./polar-curves\";\r\nimport { computeDeltaAngle, computeDistance, computeNormal, type Ray, type ReadonlyRay } from \"./rays\";\r\n\r\ntype ReadonlyPoint = {\r\n    readonly x: number;\r\n    readonly y: number;\r\n};\r\n\r\ntype ConstructionResult = {\r\n    distance: number;\r\n    periodRays: Ray[];\r\n    period: number; // can be fractional\r\n    targetPeriod: number; // integer\r\n    error: number; // in [0, 1]\r\n};\r\n\r\ntype Segment = {\r\n    readonly startingRay: ReadonlyRay;\r\n    readonly nextRay: ReadonlyRay;\r\n    readonly deltaAngle: number; // between starting and next rays\r\n    readonly deltaDistance: number; // between starting and next rays\r\n};\r\n\r\ntype SurfaceFragment = {\r\n    point: Point;\r\n    normal: Vector;\r\n};\r\n\r\nenum ESurfaceType {\r\n    NONE,\r\n    SMOOTH,\r\n    TEETH_SMALL,\r\n    TEETH_MEDIUM,\r\n    TEETH_LARGE,\r\n}\r\n\r\ntype SvgRepresentation = {\r\n    readonly container: SVGElement;\r\n    readonly rotationElement: SVGElement;\r\n    readonly gearElement: SVGElement;\r\n    currentSurfaceType: ESurfaceType;\r\n    computedPaths: Record<number, string>;\r\n};\r\n\r\nclass Gear {\r\n    public static readonly centerRadius = 0.015;\r\n\r\n    public static readonly hoveredGearClass: string = \"hovered-gear\";\r\n    public static readonly gearClass: string = \"gear\";\r\n    public static readonly gearMainClass: string = \"main\";\r\n    public static readonly gearRaysClass: string = \"gear-rays\";\r\n    public static readonly gearAxisClass: string = \"gear-axis\";\r\n\r\n    public static create(center: ReadonlyPoint, polarCurve: PolarCurve): Gear {\r\n        return new Gear(center, polarCurve.periodRays, polarCurve.periodsCount, +1, null);\r\n    }\r\n\r\n    public static slaveGear(idealCenter: ReadonlyPoint, master: Gear): Gear | null {\r\n        const dX = idealCenter.x - master.center.x;\r\n        const dY = idealCenter.y - master.center.y;\r\n        const idealDistance = Math.max(master.maxRadius + 0.01, Math.sqrt(dX * dX + dY * dY));\r\n\r\n        const adjustedDistance = Gear.getNextFittingDistance(idealDistance, master);\r\n        const period = Gear.tryBuildCompanionPeriod(adjustedDistance, master);\r\n\r\n        const angle = Math.atan2(dY, dX);\r\n        const center = {\r\n            x: master.center.x + adjustedDistance * Math.cos(angle),\r\n            y: master.center.y + adjustedDistance * Math.sin(angle),\r\n        };\r\n        const newGear = new Gear(center, period.periodRays, period.targetPeriod, -master.orientation, master);\r\n\r\n        return newGear;\r\n    }\r\n\r\n    private static tryBuildCompanionPeriod(distance: number, master: Gear): ConstructionResult {\r\n        const periodRays: Ray[] = [];\r\n        let angle = 0;\r\n\r\n        for (const periodSegment of master.periodSegments) {\r\n            periodRays.push({\r\n                angle,\r\n                radius: distance - periodSegment.startingRay.radius,\r\n            });\r\n\r\n            const dSegmentLengthSquared = periodSegment.deltaDistance * periodSegment.deltaDistance;\r\n\r\n            const r1 = distance - periodSegment.startingRay.radius;\r\n            const r2 = distance - periodSegment.nextRay.radius;\r\n            const dAngle = Math.acos((r1 * r1 + r2 * r2 - dSegmentLengthSquared) / (2 * r1 * r2));\r\n            if (isNaN(dAngle)) {\r\n                throw new Error(\"Should not happen\");\r\n            }\r\n\r\n            angle += dAngle;\r\n        }\r\n\r\n        if (master.orientation > 0) {\r\n            for (const periodRay of periodRays) {\r\n                periodRay.angle = Math.PI - periodRay.angle;\r\n            }\r\n        }\r\n\r\n        const period = TWO_PI / angle;\r\n        const targetPeriod = Math.ceil(period);\r\n        const error = targetPeriod - period;\r\n        return {\r\n            distance,\r\n            periodRays,\r\n            period,\r\n            targetPeriod,\r\n            error,\r\n        };\r\n    }\r\n\r\n    private static getNextFittingDistance(idealDistance: number, master: Gear): number {\r\n        const initialTry = Gear.tryBuildCompanionPeriod(idealDistance, master);\r\n\r\n        let tooLowTry = initialTry;\r\n        let tooHighTry = null as ConstructionResult | null;\r\n\r\n        const maxTries = 200;\r\n        let triesCount = 1;\r\n        while (tooLowTry.error > 0 && triesCount < maxTries) {\r\n            const currentDistance = tooHighTry ? 0.5 * (tooLowTry.distance + tooHighTry.distance) : tooLowTry.distance + 0.5;\r\n            if (currentDistance === tooLowTry.distance || currentDistance === tooHighTry?.distance) {\r\n                // console.debug(\"Convergence\");\r\n                break;\r\n            }\r\n\r\n            const currentTry = Gear.tryBuildCompanionPeriod(currentDistance, master);\r\n            if (currentTry.targetPeriod > tooLowTry.targetPeriod || currentTry.error > tooLowTry.error) {\r\n                tooHighTry = currentTry;\r\n            } else {\r\n                tooLowTry = currentTry;\r\n            }\r\n            triesCount++;\r\n        }\r\n\r\n        const finalTry = tooLowTry;\r\n        // console.debug(`Final error ${finalTry.error} obtained in ${triesCount} tries. Final periodicity ${finalTry.targetPeriod}, initial was ${initialTry.targetPeriod}.`);\r\n        return finalTry.distance;\r\n    }\r\n\r\n    private readonly svgRepresentation: SvgRepresentation;\r\n    public get svgElement(): SVGElement {\r\n        return this.svgRepresentation.container;\r\n    }\r\n\r\n    private readonly periodSegments: ReadonlyArray<Segment>;\r\n    private readonly periodSegmentsReverse: ReadonlyArray<Segment>;\r\n    private readonly periodAngle: number;\r\n    private readonly periodSurface: number;\r\n    public readonly minRadius: number;\r\n    public readonly maxRadius: number;\r\n    private rotation: number = 0;\r\n\r\n    private constructor(\r\n        public readonly center: ReadonlyPoint,\r\n        periodRays: ReadonlyArray<Ray>,\r\n        private readonly periodsCount: number,\r\n        private readonly orientation: number,\r\n        private readonly parent: Gear | null) {\r\n        let minRadius = 10000000000;\r\n        let maxRadius = -10000000000;\r\n        periodRays.forEach(ray => {\r\n            ray.angle = normalizeAngle(ray.angle);\r\n            minRadius = Math.min(ray.radius, minRadius);\r\n            maxRadius = Math.max(ray.radius, maxRadius);\r\n        });\r\n        this.minRadius = minRadius;\r\n        this.maxRadius = maxRadius;\r\n\r\n        this.periodAngle = TWO_PI / this.periodsCount;\r\n\r\n        const firstPeriodRay = periodRays[0];\r\n        if (!firstPeriodRay) {\r\n            throw new Error();\r\n        }\r\n        this.periodSegments = periodRays.map((currentRay: Ray, index: number) => {\r\n            let nextRay = periodRays[index + 1];\r\n            if (!nextRay) {\r\n                nextRay = {\r\n                    angle: firstPeriodRay.angle + this.orientation * this.periodAngle,\r\n                    radius: firstPeriodRay.radius,\r\n                };\r\n            }\r\n\r\n            const deltaAngle = computeDeltaAngle(nextRay, currentRay);\r\n            const deltaDistance = computeDistance(nextRay, currentRay);\r\n\r\n            return {\r\n                startingRay: { angle: currentRay.angle, radius: currentRay.radius },\r\n                nextRay,\r\n                deltaAngle,\r\n                deltaDistance,\r\n            };\r\n        });\r\n        this.periodSegmentsReverse = this.periodSegments.slice().reverse();\r\n\r\n        this.periodSurface = 0;\r\n        for (const segment of this.periodSegments) {\r\n            this.periodSurface += segment.deltaDistance;\r\n        }\r\n\r\n        this.svgRepresentation = this.buildSvgRepresentation();\r\n    }\r\n\r\n    public rotate(rotation: number): void {\r\n        if (this.parent) {\r\n            throw new Error(\"Cannot rotate child gear.\");\r\n        }\r\n        this.setRotationInternal(this.rotation + rotation);\r\n    }\r\n\r\n    public update(): void {\r\n        if (!this.parent) {\r\n            return; // nothing to do\r\n        }\r\n\r\n        const previousMasterAngle = this.parent.rotation;\r\n        {\r\n            let relativeRotation = Math.atan2(this.center.y - this.parent.center.y, this.center.x - this.parent.center.x);\r\n            if (this.orientation > 0) {\r\n                relativeRotation = Math.PI + relativeRotation;\r\n            }\r\n            this.parent.setRotationInternal(this.parent.rotation - relativeRotation);\r\n            const surfaceRotation = this.parent.getCurrentRotatedSurface();\r\n            this.rotateFromSurface(surfaceRotation);\r\n            this.setRotationInternal(this.rotation + relativeRotation);\r\n        }\r\n        this.parent.rotation = previousMasterAngle;\r\n    }\r\n\r\n    public updateDisplay(surfaceType: ESurfaceType): void {\r\n        this.svgRepresentation.rotationElement.setAttribute(\"transform\", `rotate(${toDegrees(this.rotation)})`);\r\n\r\n        if (this.svgRepresentation.currentSurfaceType !== surfaceType) {\r\n            const showTeeth = [ESurfaceType.TEETH_SMALL, ESurfaceType.TEETH_MEDIUM, ESurfaceType.TEETH_LARGE].includes(surfaceType);\r\n            if (showTeeth) {\r\n                let path = this.svgRepresentation.computedPaths[surfaceType];\r\n                if (!path) {\r\n                    let idealToothSize;\r\n                    if (surfaceType === ESurfaceType.TEETH_SMALL) {\r\n                        idealToothSize = 0.02;\r\n                    } else if (surfaceType === ESurfaceType.TEETH_MEDIUM) {\r\n                        idealToothSize = 0.04;\r\n                    } else {\r\n                        idealToothSize = 0.06;\r\n                    }\r\n                    const periodPoints = this.buildPeriodPointsWithTeeth(idealToothSize);\r\n                    path = this.buildSvgPath(periodPoints);\r\n                    this.svgRepresentation.computedPaths[surfaceType] = path;\r\n                }\r\n                this.svgRepresentation.gearElement.setAttribute(\"d\", path);\r\n            } else {\r\n                let path = this.svgRepresentation.computedPaths[ESurfaceType.SMOOTH];\r\n                if (!path) {\r\n                    const periodPoints = this.buildPeriodPointsSmooth();\r\n                    path = this.buildSvgPath(periodPoints);\r\n                    this.svgRepresentation.computedPaths[surfaceType] = path;\r\n                }\r\n                this.svgRepresentation.gearElement.setAttribute(\"d\", path);\r\n            }\r\n\r\n            this.svgRepresentation.currentSurfaceType = surfaceType;\r\n        }\r\n    }\r\n\r\n    public isPointInside(position: ReadonlyPoint): boolean {\r\n        const dX = position.x - this.center.x;\r\n        const dY = position.y - this.center.y;\r\n        const d = dX * dX + dY * dY;\r\n        return d < this.minRadius * this.minRadius;\r\n    }\r\n\r\n    public isChildOf(otherGear: Gear): boolean {\r\n        let current: Gear | null = this; // eslint-disable-line @typescript-eslint/no-this-alias\r\n        while (current) {\r\n            if (current === otherGear) {\r\n                return true;\r\n            }\r\n            current = current.parent;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private setRotationInternal(rotation: number): void {\r\n        this.rotation = normalizeAngle(rotation);\r\n    }\r\n\r\n    private getCurrentRotatedSurface(): number {\r\n        const nbPeriods = Math.floor(this.rotation / this.periodAngle);\r\n        let cumulatedAngle = this.periodAngle * nbPeriods;\r\n        let cumulatedSurface = this.periodSurface * nbPeriods;\r\n\r\n        const periodSegments = (this.orientation > 0) ? this.periodSegmentsReverse : this.periodSegments;\r\n        for (const segment of periodSegments) {\r\n            const nextCumulatedAngle = cumulatedAngle + segment.deltaAngle;\r\n            const nextCumulatedSurface = cumulatedSurface + segment.deltaDistance;\r\n\r\n            if (nextCumulatedAngle >= this.rotation) {\r\n                let partial = 0;\r\n                if (segment.deltaAngle > 0) {\r\n                    partial = (nextCumulatedAngle - this.rotation) / segment.deltaAngle * segment.deltaDistance; // approximation\r\n                }\r\n                return cumulatedSurface + partial;\r\n            }\r\n\r\n            cumulatedAngle = nextCumulatedAngle;\r\n            cumulatedSurface = nextCumulatedSurface;\r\n        }\r\n        throw new Error();\r\n    }\r\n\r\n    private rotateFromSurface(targetSurface: number): void {\r\n        const nbPeriods = Math.floor(targetSurface / this.periodSurface);\r\n        this.rotation = -this.periodAngle * nbPeriods;\r\n        let cumulatedSurface = this.periodSurface * nbPeriods;\r\n\r\n        const periodSegments = (this.orientation < 0) ? this.periodSegmentsReverse : this.periodSegments;\r\n        for (const segment of periodSegments) {\r\n            const nextCumulatedSurface = cumulatedSurface + segment.deltaDistance;\r\n\r\n            if (nextCumulatedSurface >= targetSurface) {\r\n                if (segment.deltaDistance > 0) {\r\n                    const partial = (nextCumulatedSurface - targetSurface) / segment.deltaDistance * segment.deltaAngle; // approximation\r\n                    this.rotation -= partial;\r\n                }\r\n                return;\r\n            }\r\n\r\n            cumulatedSurface = nextCumulatedSurface;\r\n            this.rotation -= segment.deltaAngle;\r\n        }\r\n\r\n        throw new Error();\r\n    }\r\n\r\n    private *walkOnPeriod(stepSize: number): Generator<SurfaceFragment> {\r\n        let positionOnSegment = 0;\r\n        for (const periodSegment of this.periodSegments) {\r\n            const normal = computeNormal(periodSegment.startingRay, periodSegment.nextRay);\r\n\r\n            while (positionOnSegment < periodSegment.deltaDistance) {\r\n                const x = positionOnSegment / periodSegment.deltaDistance; // relative advancement\r\n\r\n                const angle = periodSegment.startingRay.angle + this.orientation * x * periodSegment.deltaAngle;\r\n                const radius = periodSegment.startingRay.radius + x * (periodSegment.nextRay.radius - periodSegment.startingRay.radius);\r\n                const point = {\r\n                    x: radius * Math.cos(angle),\r\n                    y: radius * Math.sin(angle),\r\n                };\r\n                yield { point, normal };\r\n                positionOnSegment += stepSize;\r\n            }\r\n\r\n            positionOnSegment -= periodSegment.deltaDistance;\r\n        }\r\n    }\r\n\r\n    private buildPeriodPointsSmooth(): Point[] {\r\n        const points = this.periodSegments.map(segment => {\r\n            return {\r\n                x: segment.startingRay.radius * Math.cos(segment.startingRay.angle),\r\n                y: segment.startingRay.radius * Math.sin(segment.startingRay.angle),\r\n            };\r\n        });\r\n        return points;\r\n    }\r\n\r\n    private buildPeriodPointsWithTeeth(idealToothSize: number): Point[] {\r\n        const teethCount = Math.ceil(this.periodSurface / idealToothSize);\r\n        const toothSize = this.periodSurface / teethCount;\r\n\r\n        const points: Point[] = [];\r\n        const stepSize = toothSize / 10;\r\n        let i = 0;\r\n        for (const surfaceFragment of this.walkOnPeriod(stepSize)) {\r\n            const cos = Math.cos(i * TWO_PI / toothSize - Math.PI / 2);\r\n            const teethOffset = idealToothSize / 7 * this.orientation * Math.sign(cos) * Math.pow(Math.abs(cos), 1 / 5);\r\n\r\n            points.push({\r\n                x: surfaceFragment.point.x + teethOffset * surfaceFragment.normal.x,\r\n                y: surfaceFragment.point.y + teethOffset * surfaceFragment.normal.y,\r\n            });\r\n            i += stepSize;\r\n        }\r\n        return points;\r\n    }\r\n\r\n    private buildSvgPath(pointsForPeriod: Point[]): string {\r\n        const pathParts = [\"M\"];\r\n\r\n        for (let iP = 0; iP < this.periodsCount; iP++) {\r\n            const periodStartingAngle = this.orientation * iP * this.periodAngle;\r\n            const cos = Math.cos(periodStartingAngle);\r\n            const sin = Math.sin(periodStartingAngle);\r\n\r\n            for (const point of pointsForPeriod) {\r\n                const x = cos * point.x - sin * point.y;\r\n                const y = sin * point.x + cos * point.y;\r\n                pathParts.push(`${x} ${y}`);\r\n            }\r\n        }\r\n\r\n        pathParts.push(\"Z\");\r\n        return pathParts.join(\" \");\r\n    }\r\n\r\n    private buildSvgRepresentation(): SvgRepresentation {\r\n        const containerElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        containerElement.setAttribute(\"transform\", `translate(${this.center.x},${this.center.y})`);\r\n\r\n        const rotationElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        containerElement.appendChild(rotationElement);\r\n\r\n        const gearElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n        gearElement.setAttribute(\"class\", this.parent ? Gear.gearClass : `${Gear.gearClass} ${Gear.gearMainClass}`);\r\n        rotationElement.appendChild(gearElement);\r\n\r\n        const firstPeriodSegment = this.periodSegments[0];\r\n        if (!firstPeriodSegment) {\r\n            throw new Error(\"Gear has no rays.\");\r\n        }\r\n\r\n        // rays\r\n        {\r\n            const length = Math.min(0.75 * firstPeriodSegment.startingRay.radius, 0.05);\r\n\r\n            const pathParts: string[] = [];\r\n            for (let i = 0; i < this.periodsCount; i++) {\r\n                pathParts.push(\"M0 0\");\r\n\r\n                const angle = firstPeriodSegment.startingRay.angle + i * this.periodAngle;\r\n                const x = length * Math.cos(angle);\r\n                const y = length * Math.sin(angle);\r\n                pathParts.push(`L${x} ${y}`);\r\n            }\r\n            const raysElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n            raysElement.setAttribute(\"d\", pathParts.join(\"\"));\r\n            raysElement.setAttribute(\"class\", Gear.gearRaysClass);\r\n            rotationElement.appendChild(raysElement);\r\n        }\r\n\r\n        // center\r\n        {\r\n            let centerElement: SVGElement;\r\n            if (this.periodsCount < 3) {\r\n                centerElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\r\n                centerElement.setAttribute(\"cx\", \"0\");\r\n                centerElement.setAttribute(\"cy\", \"0\");\r\n                centerElement.setAttribute(\"r\", Gear.centerRadius.toString());\r\n            } else {\r\n                const radius = Gear.centerRadius * (1 + 0.1 * Math.max(0, 5 - this.periodsCount + 3));\r\n                const pathParts: string[] = [];\r\n                for (let i = 0; i < this.periodsCount; i++) {\r\n                    const command = (i === 0) ? \"M\" : \"L\";\r\n                    const angle = firstPeriodSegment.startingRay.angle + i * this.periodAngle;\r\n                    const x = radius * Math.cos(angle);\r\n                    const y = radius * Math.sin(angle);\r\n                    pathParts.push(`${command}${x} ${y}`);\r\n                }\r\n                pathParts.push(\"Z\");\r\n                centerElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n                centerElement.setAttribute(\"d\", pathParts.join(\"\"));\r\n            }\r\n            centerElement.setAttribute(\"class\", Gear.gearAxisClass);\r\n            rotationElement.appendChild(centerElement);\r\n        }\r\n\r\n        return {\r\n            container: containerElement,\r\n            rotationElement,\r\n            gearElement,\r\n            currentSurfaceType: ESurfaceType.NONE,\r\n            computedPaths: {},\r\n        };\r\n    }\r\n}\r\n\r\nexport {\r\n    ESurfaceType,\r\n    Gear,\r\n};\r\n\r\n","import { angleDifference, normalizeAngle, toRadians, TWO_PI } from \"./angle-utils\";\r\nimport { Point } from \"./point\";\r\nimport { Ray } from \"./rays\";\r\n\r\ndeclare const vnoise: {\r\n    seed: number,\r\n    fractal2d: (x: number, y: number, octave: number) => number; // returns something in [-2,+2]\r\n}; // from js-value-noise\r\n\r\ntype PolarCurve = {\r\n    periodRays: Ray[];\r\n    periodsCount: number;\r\n};\r\n\r\n// ax +by = c\r\ntype LineEquation = {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n};\r\n\r\ntype CircleEquation = {\r\n    center: Point;\r\n    radius: number;\r\n};\r\n\r\nenum ERadiusChoice {\r\n    NEAREST,\r\n    FURTHEST,\r\n}\r\n\r\nfunction getRadiusForCircle(circleEquation: CircleEquation, angle: number, choice: ERadiusChoice): number {\r\n    const a = -2 * (circleEquation.center.x * Math.cos(angle) + circleEquation.center.y * Math.sin(angle));\r\n    const b = circleEquation.center.x * circleEquation.center.x + circleEquation.center.y * circleEquation.center.y - circleEquation.radius * circleEquation.radius;\r\n\r\n    const det = a * a - 4 * b;\r\n    if (det >= 0) {\r\n        const sqrtDet = Math.sqrt(det);\r\n        if (choice === ERadiusChoice.NEAREST) {\r\n            return 0.5 * (-sqrtDet - a);\r\n        } else {\r\n            return 0.5 * (sqrtDet - a);\r\n        }\r\n\r\n    }\r\n    return NaN;\r\n}\r\n\r\nfunction getLineEquation(p1: Point, p2: Point): LineEquation {\r\n    const a = (p1.y - p2.y) / (p2.x - p1.x);\r\n    const b = 1;\r\n    const c = p1.y + a * p1.x;\r\n    return { a, b, c };\r\n}\r\n\r\nfunction getRadiusForLine(line: LineEquation, angle: number): number {\r\n    const det = line.a * Math.cos(angle) + line.b * Math.sin(angle);\r\n    if (det === 0) {\r\n        return NaN;\r\n    }\r\n    return line.c / det;\r\n}\r\n\r\nfunction buildEllipse(a: number, b: number): PolarCurve {\r\n    const periodsCount = 2;\r\n    const periodStepsCount = 60;\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < periodStepsCount; i++) {\r\n        const percentage = i / periodStepsCount;\r\n        const angle = Math.PI * percentage;\r\n        periodRays.push({\r\n            angle,\r\n            radius: a * b / Math.sqrt(Math.pow(b * Math.cos(angle), 2) + Math.pow(a * Math.sin(angle), 2)),\r\n        });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildCircle(radius: number): PolarCurve {\r\n    const periodsCount = 3;\r\n    const periodSize = 40;\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < periodSize; i++) {\r\n        const percentage = i / periodSize;\r\n        const angle = TWO_PI / periodsCount * percentage;\r\n        periodRays.push({\r\n            angle,\r\n            radius,\r\n        });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildOffCircle(radius: number, centerOffset: number): PolarCurve {\r\n    const center = { x: centerOffset, y: 0 };\r\n    const circleEquation = { center, radius };\r\n\r\n    const periodsCount = 1;\r\n    const raysCount = 120;\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const percentage = i / raysCount;\r\n        const angle = TWO_PI * percentage;\r\n\r\n        const localRadius = getRadiusForCircle(circleEquation, angle, ERadiusChoice.FURTHEST);\r\n        if (isNaN(localRadius)) {\r\n            throw new Error();\r\n        }\r\n        periodRays.push({ angle, radius: localRadius });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildHeart(size: number): PolarCurve {\r\n    const periodsCount = 1;\r\n    const raysCount = 90;\r\n\r\n    const lineEquations: LineEquation[] = [];\r\n    lineEquations.push({ a: 1, b: 1, c: -1 });\r\n    lineEquations.push({ a: -1, b: 1, c: 1 });\r\n    lineEquations.push({ a: 1, b: 0, c: 5 });\r\n\r\n    const bottomCircleRadius = 0.2;\r\n    const bottomCircleEquation: CircleEquation = {\r\n        center: { x: -1 + bottomCircleRadius * Math.SQRT2, y: 0 },\r\n        radius: bottomCircleRadius,\r\n    };\r\n\r\n    const lobesRadius = 0.6;\r\n    const lobesX = lobesRadius * Math.SQRT2 - 0.45;\r\n    const lobesY = 0.95 * lobesRadius;\r\n    const lobesSidesX = lobesX - lobesRadius * Math.SQRT2 + 0.4;\r\n    const lobeCirclesEquations: CircleEquation[] = [\r\n        { center: { x: lobesX, y: lobesY }, radius: lobesRadius },\r\n        { center: { x: lobesX, y: -lobesY }, radius: lobesRadius },\r\n    ];\r\n\r\n    const lobesCentralEquation: CircleEquation = {\r\n        center: { x: 1, y: 0 },\r\n        radius: 0.2,\r\n    };\r\n\r\n    const rotation = 0;\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const percentage = i / raysCount;\r\n        const angle = normalizeAngle(TWO_PI * percentage);\r\n\r\n        let radius = 1000000;\r\n        for (const lineEquation of lineEquations) {\r\n            const localRadius = getRadiusForLine(lineEquation, angle);\r\n            if (!isNaN(localRadius) && localRadius > 0) {\r\n                radius = Math.min(localRadius, radius);\r\n            }\r\n        }\r\n\r\n        {\r\n            const localRadius = getRadiusForCircle(bottomCircleEquation, angle, ERadiusChoice.FURTHEST);\r\n            if (!isNaN(localRadius) && localRadius > 0) {\r\n                const pointX = localRadius * Math.cos(angle);\r\n                if (pointX < 0.5 * (bottomCircleEquation.center.x - 1)) {\r\n                    radius = Math.min(localRadius, radius);\r\n                }\r\n            }\r\n        }\r\n\r\n        {\r\n            for (const lobeCircleEquation of lobeCirclesEquations) {\r\n                const localRadius = getRadiusForCircle(lobeCircleEquation, angle, ERadiusChoice.FURTHEST);\r\n                if (!isNaN(localRadius) && localRadius > 0) {\r\n                    const point = { x: localRadius * Math.cos(angle), y: localRadius * Math.sin(angle) };\r\n                    if (point.y * lobeCircleEquation.center.y >= 0 && point.x > lobesSidesX) {\r\n                        radius = Math.min(localRadius, radius);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        {\r\n            const localRadius = getRadiusForCircle(lobesCentralEquation, angle, ERadiusChoice.NEAREST);\r\n            if (!isNaN(localRadius) && localRadius > 0) {\r\n                const pointX = localRadius * Math.cos(angle);\r\n                if (pointX < 1) {\r\n                    radius = Math.max(localRadius, radius);\r\n                }\r\n            }\r\n        }\r\n\r\n        periodRays.push({\r\n            angle: normalizeAngle(angle - rotation),\r\n            radius: radius * size * 7,\r\n        });\r\n    }\r\n\r\n    periodRays.sort((ray1: Ray, ray2: Ray) => ray1.angle - ray2.angle);\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildPolygon(size: number, sides: number): PolarCurve {\r\n    const periodsCount = sides;\r\n    const raysCount = 40;\r\n\r\n    const periodAngle = TWO_PI / sides;\r\n    const p1 = { x: 1, y: 0 };\r\n    const p2 = { x: Math.cos(periodAngle), y: Math.sin(periodAngle) };\r\n    const lineEquation = getLineEquation(p1, p2);\r\n\r\n    const interiorAngle = toRadians(180 * (sides - 2) / sides);\r\n    const circlesRadius = 0.2;\r\n    const circleDistance = 1 - circlesRadius / Math.sin(interiorAngle / 2);\r\n\r\n    const circles: CircleEquation[] = [{\r\n        center: { x: circleDistance, y: 0 },\r\n        radius: circlesRadius\r\n    }, {\r\n        center: { x: circleDistance * Math.cos(periodAngle), y: circleDistance * Math.sin(periodAngle) },\r\n        radius: circlesRadius\r\n    }];\r\n\r\n    const isCircleRadiusValid = (circleEquation: CircleEquation, angle: number, radius: number): boolean => {\r\n        const intersection = { x: radius * Math.cos(angle), y: radius * Math.sin(angle) };\r\n        const circleAngle = Math.atan2(circleEquation.center.y, circleEquation.center.x);\r\n        const localAngle = Math.atan2(intersection.y - circleEquation.center.y, intersection.x - circleEquation.center.x);\r\n        return angleDifference(circleAngle, localAngle) < Math.PI - Math.PI / 2 - 0.5 * interiorAngle;\r\n    };\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const angle = i / raysCount * periodAngle;\r\n\r\n        let radius = getRadiusForLine(lineEquation, angle);\r\n        for (const circle of circles) {\r\n            const circleRadius = getRadiusForCircle(circle, angle, ERadiusChoice.FURTHEST);\r\n            if (!isNaN(circleRadius)) {\r\n                if (isCircleRadiusValid(circle, angle, circleRadius)) {\r\n                    radius = Math.min(circleRadius, circleRadius);\r\n                }\r\n            }\r\n        }\r\n        periodRays.push({ angle, radius: size * radius });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildOffPolygon(size: number, sides: number, offset: number): PolarCurve {\r\n    const periodsCount = 1;\r\n    const raysCount = 90;\r\n\r\n    const interiorAngle = toRadians(180 * (sides - 2) / sides);\r\n    const circlesRadius = 0.2;\r\n    const circleDistance = 1 - circlesRadius / Math.sin(interiorAngle / 2);\r\n    const circles: CircleEquation[] = [];\r\n\r\n    const periodAngle = TWO_PI / sides;\r\n    const center = { x: offset, y: 0 };\r\n    const points: Point[] = [];\r\n    for (let i = 0; i < sides; i++) {\r\n        const angle = i * periodAngle;\r\n        points.push({\r\n            x: Math.cos(angle) - center.x,\r\n            y: Math.sin(angle) - center.y,\r\n        });\r\n\r\n        circles.push({\r\n            center: { x: -center.x + circleDistance * Math.cos(angle), y: -center.y + circleDistance * Math.sin(angle) },\r\n            radius: circlesRadius,\r\n        });\r\n    }\r\n\r\n    const isCircleRadiusValid = (circleEquation: CircleEquation, angle: number, radius: number): boolean => {\r\n        const intersection = { x: center.x + radius * Math.cos(angle), y: center.y + radius * Math.sin(angle) };\r\n        const realCenter = { x: circleEquation.center.x + center.x, y: circleEquation.center.y + center.y };\r\n        const circleAngle = Math.atan2(realCenter.y, realCenter.x);\r\n        const localAngle = Math.atan2(intersection.y - realCenter.y, intersection.x - realCenter.x);\r\n        return angleDifference(circleAngle, localAngle) < Math.PI - Math.PI / 2 - 0.5 * interiorAngle;\r\n    };\r\n\r\n    const lineEquations = points.map((point: Point, index: number) => {\r\n        const p1 = point;\r\n        const p2 = points[(index + 1) % points.length]!;\r\n        return getLineEquation(p1, p2);\r\n    });\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const angle = i / raysCount * TWO_PI;\r\n\r\n        let minRadius = 100000;\r\n        for (const lineEquation of lineEquations) {\r\n            const radius = getRadiusForLine(lineEquation, angle);\r\n            if (radius > 0 && radius < minRadius) {\r\n                minRadius = radius;\r\n            }\r\n        }\r\n\r\n        for (const circle of circles) {\r\n            const circleRadius = getRadiusForCircle(circle, angle, ERadiusChoice.FURTHEST);\r\n            if (!isNaN(circleRadius)) {\r\n                if (circleRadius > 0 && isCircleRadiusValid(circle, angle, circleRadius)) {\r\n                    minRadius = Math.min(circleRadius, circleRadius);\r\n                }\r\n            }\r\n        }\r\n\r\n        periodRays.push({ angle, radius: size * minRadius });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nfunction buildRandom(size: number): PolarCurve {\r\n    const periodsCount = 1;\r\n    const raysCount = 90;\r\n\r\n    const range = size * 1.5;\r\n\r\n    vnoise.seed = Math.random();\r\n\r\n    const periodRays: Ray[] = [];\r\n    for (let i = 0; i < raysCount; i++) {\r\n        const angle = TWO_PI * i / raysCount;\r\n        const noise = vnoise.fractal2d(Math.cos(angle), Math.sin(angle), 2) * 0.25; // in [-0.5,+0.5]\r\n        periodRays.push({\r\n            angle,\r\n            radius: size + range * noise,\r\n        });\r\n    }\r\n\r\n    return {\r\n        periodRays,\r\n        periodsCount,\r\n    };\r\n}\r\n\r\nexport type {\r\n    PolarCurve,\r\n};\r\nexport {\r\n    buildCircle,\r\n    buildEllipse,\r\n    buildHeart,\r\n    buildOffCircle,\r\n    buildOffPolygon,\r\n    buildPolygon,\r\n    buildRandom,\r\n};\r\n\r\n","import { angleDifference } from \"./angle-utils\";\r\nimport type { Point, Vector } from \"./point\";\r\n\r\ntype Ray = {\r\n    angle: number;\r\n    radius: number;\r\n};\r\n\r\ntype ReadonlyRay = {\r\n    readonly angle: number;\r\n    readonly radius: number;\r\n};\r\n\r\nfunction computeRayPoint(ray: Ray): Point {\r\n    return {\r\n        x: ray.radius * Math.cos(ray.angle),\r\n        y: ray.radius * Math.sin(ray.angle),\r\n    };\r\n}\r\n\r\nfunction computeDeltaAngle(ray1: Ray, ray2: Ray): number {\r\n    return angleDifference(ray1.angle, ray2.angle);\r\n}\r\n\r\nfunction computeDistanceSquared(ray1: Ray, ray2: Ray): number {\r\n    const deltaAngle = computeDeltaAngle(ray1, ray2);\r\n    return (ray1.radius * ray1.radius) + (ray2.radius * ray2.radius) - 2 * ray1.radius * ray2.radius * Math.cos(deltaAngle);\r\n}\r\n\r\nfunction computeDistance(ray1: Ray, ray2: Ray): number {\r\n    return Math.sqrt(computeDistanceSquared(ray1, ray2));\r\n}\r\n\r\nfunction computeNormal(ray1: Ray, ray2: Ray): Vector {\r\n    const point1 = computeRayPoint(ray1);\r\n    const point2 = computeRayPoint(ray2);\r\n\r\n    const normal = {\r\n        x: -(point2.y - point1.y),\r\n        y: point2.x - point1.x,\r\n    };\r\n    const length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);\r\n    normal.x /= length;\r\n    normal.y /= length;\r\n\r\n    if (point1.x * normal.x + point1.y * normal.y < 0) {\r\n        normal.x *= -1;\r\n        normal.y *= -1;\r\n    }\r\n    return normal;\r\n}\r\n\r\nexport type {\r\n    Ray,\r\n    ReadonlyRay,\r\n};\r\nexport {\r\n    computeDeltaAngle,\r\n    computeDistance,\r\n    computeDistanceSquared,\r\n    computeNormal,\r\n};\r\n\r\n\r\n","/// <reference types=\"./page-interface-generated\" />\r\n\r\nconst controlId = {\r\n    CENTRAL_GEAR_SELECT_ID: \"central-gear-select-id\",\r\n    SHIFT_CENTER_CHECKBOX_ID: \"shift-center-checkbox-id\",\r\n    ROTATION_SPEED_RANGE: \"rotation-speed-range-id\",\r\n    RESET_BUTTON_ID: \"reset-button\",\r\n    RANDOM_BUTTON_ID: \"random-button\",\r\n    DISPLAY_STYLE_TABS_ID: \"display-style-tabs-id\",\r\n    SHOW_RAYS_CHECKBOX_ID: \"show-rays-checkbox-id\",\r\n    SHOW_TEETH_CHECKBOX_ID: \"show-teeth-checkbox-id\",\r\n    TEETH_SIZE_TABS_ID: \"teeth-size-tabs-id\",\r\n    DOWNLOAD_BUTTON_ID: \"download-button\",\r\n};\r\n\r\nenum EGearShape {\r\n    ELLIPSE = \"ellipse\",\r\n    HEART = \"heart\",\r\n    TRIANGLE = \"triangle\",\r\n    SQUARE = \"square\",\r\n    PENTAGON = \"pentagon\",\r\n    RANDOM = \"random\",\r\n    CIRCLE = \"circle\",\r\n    OFF_CIRCLE = \"off-circle\",\r\n    OFF_TRIANGLE = \"off-triangle\",\r\n    OFF_SQUARE = \"off-square\",\r\n    OFF_PENTAGON = \"off-pentagon\",\r\n}\r\n\r\nenum EDisplayStyle {\r\n    FLAT = \"flat\",\r\n    OUTLINE = \"outline\",\r\n}\r\n\r\nenum ETeethSize {\r\n    SMALL = \"small\",\r\n    MEDIUM = \"medium\",\r\n    LARGE = \"large\",\r\n}\r\n\r\nfunction callCallbacks(callbacks: VoidFunction[]): void {\r\n    for (const callback of callbacks) {\r\n        callback();\r\n    }\r\n}\r\n\r\nPage.Select.addObserver(controlId.CENTRAL_GEAR_SELECT_ID, () => {\r\n    callCallbacks(Parameters.onGearShapeChange);\r\n});\r\nPage.Checkbox.addObserver(controlId.SHIFT_CENTER_CHECKBOX_ID, () => {\r\n    callCallbacks(Parameters.onGearShapeChange);\r\n});\r\n\r\nPage.Button.addObserver(controlId.RESET_BUTTON_ID, () => {\r\n    callCallbacks(Parameters.onReset);\r\n});\r\n\r\nPage.Button.addObserver(controlId.DOWNLOAD_BUTTON_ID, () => {\r\n    callCallbacks(Parameters.onDownload);\r\n});\r\n\r\nPage.Button.addObserver(controlId.RANDOM_BUTTON_ID, () => {\r\n    const gearShapes = Object.values(EGearShape);\r\n    const shapeId = Math.floor(Math.random() * gearShapes.length);\r\n    const gearShape = gearShapes[shapeId] as string;\r\n    Page.Select.setValue(controlId.CENTRAL_GEAR_SELECT_ID, gearShape);\r\n    updateShiftCenterControl();\r\n    Page.Checkbox.setChecked(controlId.SHIFT_CENTER_CHECKBOX_ID, Math.random() > 0.5);\r\n    callCallbacks(Parameters.onReset);\r\n});\r\n\r\nfunction onDisplayStyleChange(): void {\r\n    callCallbacks(Parameters.onDisplayStyleChange);\r\n}\r\nPage.Tabs.addObserver(controlId.DISPLAY_STYLE_TABS_ID, onDisplayStyleChange);\r\nPage.Checkbox.addObserver(controlId.SHOW_RAYS_CHECKBOX_ID, onDisplayStyleChange);\r\n\r\nabstract class Parameters {\r\n    public static get rotationSpeed(): number {\r\n        return Page.Range.getValue(controlId.ROTATION_SPEED_RANGE);\r\n    }\r\n\r\n    public static get gearShape(): EGearShape {\r\n        const gearShape = Page.Select.getValue(controlId.CENTRAL_GEAR_SELECT_ID) as EGearShape;\r\n        if (Parameters.shiftCenter) {\r\n            if (gearShape === EGearShape.CIRCLE) {\r\n                return EGearShape.OFF_CIRCLE;\r\n            } else if (gearShape === EGearShape.TRIANGLE) {\r\n                return EGearShape.OFF_TRIANGLE;\r\n            } else if (gearShape === EGearShape.SQUARE) {\r\n                return EGearShape.OFF_SQUARE;\r\n            } else if (gearShape === EGearShape.PENTAGON) {\r\n                return EGearShape.OFF_PENTAGON;\r\n            }\r\n        }\r\n        return gearShape;\r\n    }\r\n\r\n    public static get displayStyle(): EDisplayStyle {\r\n        return Page.Tabs.getValues(controlId.DISPLAY_STYLE_TABS_ID)[0] as EDisplayStyle;\r\n    }\r\n    public static get showRays(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_RAYS_CHECKBOX_ID);\r\n    }\r\n\r\n    public static get showTeeth(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_TEETH_CHECKBOX_ID);\r\n    }\r\n\r\n    public static get teethSize(): ETeethSize {\r\n        return Page.Tabs.getValues(controlId.TEETH_SIZE_TABS_ID)[0] as ETeethSize;\r\n    }\r\n\r\n    private static get shiftCenter(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHIFT_CENTER_CHECKBOX_ID);\r\n    }\r\n\r\n    public static onGearShapeChange: VoidFunction[] = [];\r\n\r\n    public static onReset: VoidFunction[] = [];\r\n\r\n    public static onDownload: VoidFunction[] = [];\r\n\r\n    public static onDisplayStyleChange: VoidFunction[] = [];\r\n}\r\n\r\nfunction updateTeethSizeControls(): void {\r\n    Page.Controls.setVisibility(controlId.TEETH_SIZE_TABS_ID, Parameters.showTeeth);\r\n}\r\nPage.Checkbox.addObserver(controlId.SHOW_TEETH_CHECKBOX_ID, updateTeethSizeControls);\r\nupdateTeethSizeControls();\r\n\r\nfunction updateShiftCenterControl(): void {\r\n    const gearShape = Page.Select.getValue(controlId.CENTRAL_GEAR_SELECT_ID) as EGearShape;\r\n    const visible = [EGearShape.CIRCLE, EGearShape.TRIANGLE, EGearShape.SQUARE, EGearShape.PENTAGON].includes(gearShape);\r\n    Page.Controls.setVisibility(controlId.SHIFT_CENTER_CHECKBOX_ID, visible);\r\n}\r\nPage.Select.addObserver(controlId.CENTRAL_GEAR_SELECT_ID, updateShiftCenterControl);\r\nupdateShiftCenterControl();\r\n\r\nexport {\r\n    EDisplayStyle,\r\n    EGearShape,\r\n    ETeethSize,\r\n    Parameters,\r\n};\r\n\r\n","import { Gear } from \"../engine/gear\";\r\nimport type { PolarCurve } from \"../engine/polar-curves\";\r\nimport * as PolarCurves from \"../engine/polar-curves\";\r\nimport { EGearShape } from \"../parameters\";\r\nimport { SvgCanvas } from \"../svg-canvas\";\r\nimport { distance } from \"../utils\";\r\nimport { Scene } from \"./scene\";\r\n\r\nfunction rand(min: number, max: number): number {\r\n    return min + (max - min) * Math.random();\r\n}\r\n\r\nclass RandomScene extends Scene {\r\n    public static create(svgCanvas: SvgCanvas, centralGear: EGearShape): RandomScene {\r\n        let bestScene = new RandomScene(svgCanvas, centralGear);\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            const scene = new RandomScene(svgCanvas, centralGear);\r\n            if (scene.secondaryGears.length > bestScene.secondaryGears.length) {\r\n                bestScene = scene;\r\n            }\r\n        }\r\n\r\n        return bestScene;\r\n    }\r\n\r\n    private constructor(svgCanvas: SvgCanvas, centralGear: EGearShape) {\r\n        const size = 0.1;\r\n\r\n        let polarCurve: PolarCurve;\r\n        switch (centralGear) {\r\n            case EGearShape.ELLIPSE:\r\n                polarCurve = PolarCurves.buildEllipse(size, rand(0.4, 0.7) * size);\r\n                break;\r\n            case EGearShape.HEART:\r\n                polarCurve = PolarCurves.buildHeart(0.17 * size);\r\n                break;\r\n            case EGearShape.OFF_CIRCLE:\r\n                polarCurve = PolarCurves.buildOffCircle(size, rand(0.3, 0.9) * size);\r\n                break;\r\n            case EGearShape.TRIANGLE:\r\n                polarCurve = PolarCurves.buildPolygon(size, 3);\r\n                break;\r\n            case EGearShape.SQUARE:\r\n                polarCurve = PolarCurves.buildPolygon(size, 4);\r\n                break;\r\n            case EGearShape.PENTAGON:\r\n                polarCurve = PolarCurves.buildPolygon(size, 5);\r\n                break;\r\n            case EGearShape.OFF_TRIANGLE:\r\n                polarCurve = PolarCurves.buildOffPolygon(size, 3, rand(0.3, 0.5));\r\n                break;\r\n            case EGearShape.OFF_SQUARE:\r\n                polarCurve = PolarCurves.buildOffPolygon(size, 4, rand(0.3, 0.5));\r\n                break;\r\n            case EGearShape.OFF_PENTAGON:\r\n                polarCurve = PolarCurves.buildOffPolygon(size, 5, rand(0.3, 0.5));\r\n                break;\r\n            case EGearShape.CIRCLE:\r\n                polarCurve = PolarCurves.buildCircle(size);\r\n                break;\r\n            case EGearShape.RANDOM:\r\n                polarCurve = PolarCurves.buildRandom(size);\r\n                break;\r\n            default:\r\n                throw new Error(centralGear);\r\n        }\r\n\r\n        const mainGear = Gear.create({ x: 0, y: 0 }, polarCurve);\r\n\r\n        super(svgCanvas, mainGear);\r\n\r\n        this.secondaryGears = [];\r\n\r\n        const viewportWidth = svgCanvas.width;\r\n        const viewportHeight = svgCanvas.height;\r\n        for (let i = 0; i < 300; i++) {\r\n            const center = {\r\n                x: rand(-0.5 * viewportWidth, 0.5 * viewportWidth),\r\n                y: rand(-0.5 * viewportHeight, 0.5 * viewportHeight),\r\n            };\r\n            const isInsideGear = !!this.allGears.find(existingGear => distance(center, existingGear.center) < existingGear.minRadius);\r\n            if (isInsideGear) {\r\n                continue;\r\n            }\r\n\r\n            const newGear = this.tryBuildGear(center);\r\n            if (newGear && newGear.minRadius > 1.2 * Gear.centerRadius && newGear.maxRadius < 0.3) {\r\n                this.secondaryGears.push(newGear);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    RandomScene,\r\n};\r\n\r\n","/// <reference types=\"../page-interface-generated\" />\r\n\r\nimport { ESurfaceType, Gear } from \"../engine/gear\";\r\nimport { Point } from \"../engine/point\";\r\nimport { EDisplayStyle, ETeethSize, Parameters } from \"../parameters\";\r\nimport { SvgCanvas } from \"../svg-canvas\";\r\nimport { distance } from \"../utils\";\r\n\r\nfunction removeFromArray<T>(array: T[], element: T): void {\r\n    while (array.length > 0) {\r\n        const index = array.indexOf(element);\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        array.splice(index, 1);\r\n    }\r\n}\r\n\r\nconst isMobile = \"ontouchstart\" in window && window.innerWidth < 900;\r\n\r\nabstract class Scene {\r\n    protected readonly mainGear: Gear;\r\n    protected secondaryGears: Gear[] = [];\r\n\r\n    private readonly svgCanvas: SvgCanvas;\r\n\r\n    private readonly onMouseMove: VoidFunction;\r\n    private readonly onMouseUp: VoidFunction;\r\n    private readonly onRightClick: () => void;\r\n\r\n    private mobileGear: Gear | null = null;\r\n\r\n    protected constructor(svgCanvas: SvgCanvas, mainGear: Gear) {\r\n        this.svgCanvas = svgCanvas;\r\n\r\n        const updateStyle = (): void => {\r\n            const flatStyle = (Parameters.displayStyle === EDisplayStyle.FLAT);\r\n            const gearColor = \"red\";\r\n            const gearMainColor = \"#FF6A00\";\r\n            const gearOpacity = flatStyle ? 0.7 : 0.4;\r\n            const gearHoverOpacityFrom = flatStyle ? 0.6 : 0.35;\r\n            const gearHoverOpacityTo = flatStyle ? 0.45 : 0.15;\r\n            const axisColor = flatStyle ? \"#333333\" : \"green\";\r\n\r\n            const newStyle = `.${Gear.gearClass} {\r\n    fill:           ${gearColor};\r\n    fill-opacity:   ${gearOpacity};\r\n    stroke:         ${gearColor};\r\n    stroke-width:   ${flatStyle ? 0 : 0.004};\r\n}\r\n.${Gear.gearClass}.${Gear.gearMainClass} {\r\n    fill:   ${gearMainColor};\r\n    stroke: ${gearMainColor};\r\n}\r\n.${Gear.gearRaysClass} {\r\n    ${Parameters.showRays ? \"\" : \"display: none;\"}\r\n    stroke:         ${axisColor};\r\n    stroke-width:   0.006;\r\n}\r\n.${Gear.gearAxisClass} {\r\n    fill: ${axisColor};\r\n}\r\n@keyframes hover-animation {\r\n    from { fill-opacity: ${gearHoverOpacityFrom}; }\r\n    to { fill-opacity: ${gearHoverOpacityTo}; }\r\n}\r\n.${Gear.hoveredGearClass} .${Gear.gearClass} {\r\n    animation: hover-animation .75s ease-in-out infinite alternate;\r\n}\r\n`;\r\n            this.svgCanvas.setStyle(newStyle);\r\n        };\r\n        Parameters.onDisplayStyleChange.push(updateStyle);\r\n        updateStyle();\r\n\r\n        this.mainGear = mainGear;\r\n\r\n        this.onMouseMove = () => {\r\n            const center = this.getMousePosition();\r\n\r\n            if (this.mobileGear) {\r\n                this.svgCanvas.removeChild(this.mobileGear.svgElement);\r\n                this.mobileGear = null;\r\n            }\r\n\r\n            const hoveredGear = this.getHoveredGear();\r\n            if (!hoveredGear) {\r\n                this.mobileGear = this.tryBuildGear(center);\r\n                if (this.mobileGear) {\r\n                    this.svgCanvas.addChild(this.mobileGear.svgElement);\r\n                }\r\n            }\r\n\r\n            this.svgCanvas.cursor = (this.mobileGear || hoveredGear) ? \"\" : \"not-allowed\";\r\n        };\r\n\r\n        this.onMouseUp = () => {\r\n            if (this.mobileGear) {\r\n                this.secondaryGears.push(this.mobileGear);\r\n                this.mobileGear = null;\r\n            }\r\n        };\r\n        this.onRightClick = () => {\r\n            const hoveredGear = this.getHoveredGear();\r\n            if (hoveredGear) {\r\n                const newSecondaryGears: Gear[] = [];\r\n                for (const gear of this.secondaryGears) {\r\n                    if (gear.isChildOf(hoveredGear)) {\r\n                        this.svgCanvas.removeChild(gear.svgElement);\r\n                    } else {\r\n                        newSecondaryGears.push(gear);\r\n                    }\r\n                }\r\n                this.secondaryGears = newSecondaryGears;\r\n                this.onMouseMove();\r\n            }\r\n        };\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        this.mainGear.rotate(5 * dt * Parameters.rotationSpeed / 1000);\r\n\r\n        for (const secondaryGear of this.secondaryGears) {\r\n            secondaryGear.update();\r\n        }\r\n\r\n        this.mobileGear?.update();\r\n\r\n        this.updateDisplay();\r\n    }\r\n\r\n    public attach(): void {\r\n        this.detach();\r\n\r\n        Page.Canvas.Observers.mouseMove.push(this.onMouseMove);\r\n        Page.Canvas.Observers.mouseUp.push(this.onMouseUp);\r\n        this.svgCanvas.onRightClick.push(this.onRightClick);\r\n\r\n        for (const gear of [this.mainGear, ...this.secondaryGears]) {\r\n            this.svgCanvas.addChild(gear.svgElement);\r\n        }\r\n    }\r\n\r\n    public detach(): void {\r\n        removeFromArray(Page.Canvas.Observers.mouseMove, this.onMouseMove);\r\n        removeFromArray(Page.Canvas.Observers.mouseUp, this.onMouseUp);\r\n        removeFromArray(this.svgCanvas.onRightClick, this.onRightClick);\r\n    }\r\n\r\n    protected tryBuildGear(center: Point): Gear | null {\r\n        const closestGear = this.findClosestGear(center);\r\n\r\n        let newGear: Gear | null = null;\r\n        try {\r\n            newGear = Gear.slaveGear(center, closestGear);\r\n        } catch (e: unknown) {\r\n            console.debug(e);\r\n        }\r\n\r\n        if (newGear) {\r\n            for (const existingGear of this.allGears) {\r\n                if (existingGear !== closestGear) {\r\n                    const margin = distance(newGear.center, existingGear.center) - newGear.maxRadius - existingGear.maxRadius;\r\n                    if (margin <= 0) {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return newGear;\r\n    }\r\n\r\n    protected get allGears(): Gear[] {\r\n        return [this.mainGear, ...this.secondaryGears];\r\n    }\r\n\r\n    private updateDisplay(): void {\r\n        const showTeeth = Parameters.showTeeth;\r\n        const teethSize = Parameters.teethSize;\r\n        let surfaceType: ESurfaceType;\r\n        if (showTeeth) {\r\n            if (teethSize === ETeethSize.SMALL) {\r\n                surfaceType = ESurfaceType.TEETH_SMALL;\r\n            } else if (teethSize === ETeethSize.MEDIUM) {\r\n                surfaceType = ESurfaceType.TEETH_MEDIUM;\r\n            } else {\r\n                surfaceType = ESurfaceType.TEETH_LARGE;\r\n            }\r\n        } else {\r\n            surfaceType = ESurfaceType.SMOOTH;\r\n        }\r\n\r\n        for (const gear of this.allGears) {\r\n            gear.updateDisplay(surfaceType);\r\n        }\r\n        this.mobileGear?.updateDisplay(surfaceType);\r\n\r\n        const hoveredGear = this.getHoveredGear();\r\n        for (const gear of this.secondaryGears) {\r\n            gear.svgElement.classList.toggle(Gear.hoveredGearClass, !!hoveredGear && gear.isChildOf(hoveredGear));\r\n        }\r\n    }\r\n\r\n    private getHoveredGear(): Gear | null {\r\n        if (!this.mobileGear && !isMobile) {\r\n            const mousePosition = this.getMousePosition();\r\n            return this.secondaryGears.find(gear => gear.isPointInside(mousePosition)) || null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private findClosestGear(center: Point): Gear {\r\n        let closestGear = this.mainGear;\r\n        let lowestDistance = distance(center, closestGear.center) - closestGear.maxRadius;\r\n\r\n        for (const gear of this.secondaryGears) {\r\n            const currentDistance = distance(center, gear.center) - gear.maxRadius;\r\n            if (currentDistance < lowestDistance) {\r\n                closestGear = gear;\r\n                lowestDistance = currentDistance;\r\n            }\r\n        }\r\n\r\n        return closestGear;\r\n    }\r\n\r\n    private getMousePosition(): Point {\r\n        const aspectRatio = Page.Canvas.getAspectRatio();\r\n        const mousePosition = Page.Canvas.getMousePosition();\r\n        return {\r\n            x: (2 * mousePosition[0] - 1) * Math.max(1, aspectRatio),\r\n            y: (2 * mousePosition[1] - 1) * Math.max(1, 1 / aspectRatio),\r\n        };\r\n    }\r\n}\r\n\r\nexport {\r\n    Scene\r\n};\r\n\r\n","/// <reference types=\"./page-interface-generated\" />\r\n\r\nimport { downloadTextFile } from \"./utils\";\r\n\r\nclass SvgCanvas {\r\n    private readonly svg: SVGSVGElement;\r\n    private readonly styleElement: SVGStyleElement;\r\n    private readonly backgroundElement: SVGElement;\r\n    private readonly canvasContainer: HTMLElement;\r\n\r\n    public onRightClick: VoidFunction[] = [];\r\n\r\n    public constructor() {\r\n        this.svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        this.svg.style.position = \"absolute\";\r\n        this.svg.style.top = \"0\";\r\n        this.svg.style.left = \"0\";\r\n        this.svg.style.width = \"100%\";\r\n        this.svg.style.height = \"100%\";\r\n        this.svg.style.pointerEvents = \"none\";\r\n\r\n        this.styleElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\");\r\n        this.svg.appendChild(this.styleElement);\r\n\r\n        this.backgroundElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n        this.backgroundElement.setAttribute(\"x\", \"-100%\");\r\n        this.backgroundElement.setAttribute(\"y\", \"-100%\");\r\n        this.backgroundElement.setAttribute(\"width\", \"200%\");\r\n        this.backgroundElement.setAttribute(\"height\", \"200%\");\r\n        this.backgroundElement.setAttribute(\"fill\", \"black\");\r\n        this.svg.appendChild(this.backgroundElement);\r\n\r\n        const adjustAspectRatio = (): void => {\r\n            const width = this.width;\r\n            const height = this.height;\r\n            this.svg.setAttribute(\"viewBox\", `${-0.5 * width} ${-0.5 * height} ${width} ${height}`);\r\n        };\r\n        Page.Canvas.Observers.canvasResize.push(adjustAspectRatio);\r\n        adjustAspectRatio();\r\n\r\n        const canvasContainer = Page.Canvas.getCanvasContainer();\r\n        if (!canvasContainer) {\r\n            throw new Error();\r\n        }\r\n        this.canvasContainer = canvasContainer;\r\n        this.canvasContainer.insertBefore(this.svg, Page.Canvas.getCanvas());\r\n        this.canvasContainer.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            if (event.button === 2) { // right button\r\n                for (const observer of this.onRightClick) {\r\n                    observer();\r\n                }\r\n            }\r\n        });\r\n        this.canvasContainer.addEventListener(\"contextmenu\", (event: Event) => {\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    public clear(): void {\r\n        let child = this.svg.firstChild;\r\n        while (child) {\r\n            this.svg.removeChild(child);\r\n            child = this.svg.firstChild;\r\n        }\r\n        this.svg.appendChild(this.styleElement);\r\n        this.svg.appendChild(this.backgroundElement);\r\n    }\r\n\r\n    public removeChild(child: SVGElement): void {\r\n        this.svg.removeChild(child);\r\n    }\r\n\r\n    public addChild(element: SVGElement): void {\r\n        this.svg.appendChild(element);\r\n    }\r\n\r\n    public download(): void {\r\n        this.svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n        this.svg.setAttribute(\"version\", \"1.1\");\r\n        const content = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n${this.svg.outerHTML}`;\r\n        this.svg.removeAttribute(\"xmlns\");\r\n        this.svg.removeAttribute(\"version\");\r\n\r\n        downloadTextFile(\"gears.svg\", content);\r\n    }\r\n\r\n    public setStyle(style: string): void {\r\n        this.styleElement.innerHTML = style;\r\n    }\r\n\r\n    public get width(): number {\r\n        return 2 * Math.max(1, Page.Canvas.getAspectRatio());\r\n    }\r\n\r\n    public get height(): number {\r\n        return 2 * Math.max(1, 1 / Page.Canvas.getAspectRatio());\r\n    }\r\n\r\n    public set cursor(cursor: string) {\r\n        this.canvasContainer.style.cursor = cursor;\r\n    }\r\n}\r\n\r\nexport {\r\n    SvgCanvas,\r\n};\r\n\r\n","import { Point } from \"./engine/point\";\r\n\r\nfunction distanceSquared(p1: Point, p2: Point): number {\r\n    const dX = p1.x - p2.x;\r\n    const dY = p1.y - p2.y;\r\n    return dX * dX + dY * dY;\r\n}\r\n\r\nfunction distance(p1: Point, p2: Point): number {\r\n    const squared = distanceSquared(p1, p2);\r\n    return Math.sqrt(squared);\r\n}\r\n\r\nfunction downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    type IeNavigator = Navigator & {\r\n        msSaveBlob: (blob: Blob, filename: string) => void;\r\n    };\r\n    if (typeof window.navigator !== \"undefined\" && typeof (window.navigator as IeNavigator).msSaveBlob !== \"undefined\") { // for IE\r\n        (window.navigator as IeNavigator).msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset[\"downloadurl\"] = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nexport {\r\n    distance,\r\n    distanceSquared,\r\n    downloadTextFile,\r\n};\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/// <reference types=\"./page-interface-generated\" />\r\n\r\nimport { Parameters } from \"./parameters\";\r\nimport { RandomScene } from \"./scenes/random-scene\";\r\nimport { SvgCanvas } from \"./svg-canvas\";\r\n\r\n\r\nfunction main(): void {\r\n    const svgCanvas = new SvgCanvas();\r\n\r\n    let scene = RandomScene.create(svgCanvas, Parameters.gearShape);\r\n    scene.attach();\r\n\r\n    function resetScene(): void {\r\n        scene.detach();\r\n        svgCanvas.clear();\r\n        scene = RandomScene.create(svgCanvas, Parameters.gearShape);\r\n        scene.attach();\r\n    }\r\n    Parameters.onGearShapeChange.push(resetScene);\r\n    Parameters.onReset.push(resetScene);\r\n    Parameters.onDownload.push(() => svgCanvas.download());\r\n\r\n    let lastUpdate = performance.now();\r\n    function mainLoop(): void {\r\n        const now = performance.now();\r\n        const dt = now - lastUpdate;\r\n        lastUpdate = now;\r\n\r\n        scene.update(dt);\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n"],"names":["TWO_PI","Math","PI","makeAnglePositive","angle","ceil","normalizeAngle","toDegrees","angleInRadians","toRadians","angleInDegrees","angleDifference","angle1","angle2","rawDifference","ESurfaceType","Gear","create","center","polarCurve","periodRays","periodsCount","slaveGear","idealCenter","master","dX","x","dY","y","idealDistance","max","maxRadius","sqrt","adjustedDistance","getNextFittingDistance","period","tryBuildCompanionPeriod","atan2","cos","sin","targetPeriod","orientation","distance","periodSegment","periodSegments","push","radius","startingRay","dSegmentLengthSquared","deltaDistance","r1","r2","nextRay","dAngle","acos","isNaN","Error","periodRay","error","tooLowTry","tooHighTry","triesCount","currentDistance","currentTry","svgElement","this","svgRepresentation","container","parent","rotation","minRadius","forEach","ray","min","periodAngle","firstPeriodRay","map","currentRay","index","deltaAngle","computeDeltaAngle","computeDistance","periodSegmentsReverse","slice","reverse","periodSurface","segment","buildSvgRepresentation","rotate","setRotationInternal","update","previousMasterAngle","relativeRotation","surfaceRotation","getCurrentRotatedSurface","rotateFromSurface","updateDisplay","surfaceType","rotationElement","setAttribute","currentSurfaceType","TEETH_SMALL","TEETH_MEDIUM","TEETH_LARGE","includes","path","computedPaths","idealToothSize","periodPoints","buildPeriodPointsWithTeeth","buildSvgPath","gearElement","SMOOTH","buildPeriodPointsSmooth","isPointInside","position","isChildOf","otherGear","current","nbPeriods","floor","cumulatedAngle","cumulatedSurface","nextCumulatedAngle","nextCumulatedSurface","partial","targetSurface","walkOnPeriod","stepSize","positionOnSegment","normal","computeNormal","point","teethCount","toothSize","points","i","surfaceFragment","teethOffset","sign","pow","abs","pointsForPeriod","pathParts","iP","periodStartingAngle","join","containerElement","document","createElementNS","appendChild","gearClass","gearMainClass","firstPeriodSegment","length","raysElement","gearRaysClass","centerElement","centerRadius","toString","command","gearAxisClass","NONE","hoveredGearClass","ERadiusChoice","getRadiusForCircle","circleEquation","choice","a","det","sqrtDet","NEAREST","NaN","getLineEquation","p1","p2","b","c","getRadiusForLine","line","buildEllipse","percentage","buildCircle","buildOffCircle","centerOffset","localRadius","FURTHEST","buildHeart","size","lineEquations","bottomCircleEquation","SQRT2","lobesRadius","lobesX","lobesSidesX","lobeCirclesEquations","lobesCentralEquation","lineEquation","lobeCircleEquation","sort","ray1","ray2","buildPolygon","sides","interiorAngle","circleDistance","circles","isCircleRadiusValid","intersection","circleAngle","localAngle","circle","circleRadius","buildOffPolygon","offset","realCenter","buildRandom","range","vnoise","seed","random","noise","fractal2d","computeRayPoint","computeDistanceSquared","point1","point2","controlId","EGearShape","EDisplayStyle","ETeethSize","callCallbacks","callbacks","callback","onDisplayStyleChange","Parameters","Page","Select","addObserver","onGearShapeChange","Checkbox","Button","onReset","onDownload","gearShapes","Object","values","gearShape","setValue","updateShiftCenterControl","setChecked","Tabs","rotationSpeed","Range","getValue","shiftCenter","CIRCLE","OFF_CIRCLE","TRIANGLE","OFF_TRIANGLE","SQUARE","OFF_SQUARE","PENTAGON","OFF_PENTAGON","displayStyle","getValues","showRays","isChecked","showTeeth","teethSize","updateTeethSizeControls","Controls","setVisibility","visible","rand","RandomScene","Scene","svgCanvas","centralGear","bestScene","scene","secondaryGears","ELLIPSE","PolarCurves","HEART","RANDOM","super","viewportWidth","width","viewportHeight","height","allGears","find","existingGear","newGear","tryBuildGear","removeFromArray","array","element","indexOf","splice","isMobile","window","innerWidth","mainGear","mobileGear","updateStyle","flatStyle","FLAT","gearMainColor","gearOpacity","gearHoverOpacityFrom","gearHoverOpacityTo","axisColor","newStyle","setStyle","onMouseMove","getMousePosition","removeChild","hoveredGear","getHoveredGear","addChild","cursor","onMouseUp","onRightClick","newSecondaryGears","gear","dt","secondaryGear","attach","detach","Canvas","Observers","mouseMove","mouseUp","closestGear","findClosestGear","e","console","debug","SMALL","MEDIUM","classList","toggle","mousePosition","lowestDistance","aspectRatio","getAspectRatio","SvgCanvas","svg","style","top","left","pointerEvents","styleElement","backgroundElement","adjustAspectRatio","canvasResize","canvasContainer","getCanvasContainer","insertBefore","getCanvas","addEventListener","event","button","observer","preventDefault","clear","child","firstChild","download","content","outerHTML","removeAttribute","downloadTextFile","innerHTML","distanceSquared","squared","fileName","fileType","blob","Blob","type","navigator","msSaveBlob","objectUrl","URL","createObjectURL","linkElement","createElement","href","dataset","display","body","click","setTimeout","revokeObjectURL","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","resetScene","lastUpdate","performance","now","requestAnimationFrame","mainLoop","main"],"sourceRoot":""}